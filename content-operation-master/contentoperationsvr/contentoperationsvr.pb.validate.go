// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: contentoperationsvr.proto

package contentoperationsvr

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserIDMultiError, or nil if none found.
func (m *UserID) ValidateAll() error {
	return m.validate(true)
}

func (m *UserID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UnionId

	// no validation rules for Openid

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return UserIDMultiError(errors)
	}

	return nil
}

// UserIDMultiError is an error wrapping multiple validation errors returned by
// UserID.ValidateAll() if the designated constraints aren't met.
type UserIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserIDMultiError) AllErrors() []error { return m }

// UserIDValidationError is the validation error returned by UserID.Validate if
// the designated constraints aren't met.
type UserIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIDValidationError) ErrorName() string { return "UserIDValidationError" }

// Error satisfies the builtin error interface
func (e UserIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIDValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for HeadUrl

	// no validation rules for NickName

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := LoginReqValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}

	return nil
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRspMultiError, or nil
// if none found.
func (m *LoginRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginRspValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginRspValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginRspValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginRspMultiError(errors)
	}

	return nil
}

// LoginRspMultiError is an error wrapping multiple validation errors returned
// by LoginRsp.ValidateAll() if the designated constraints aren't met.
type LoginRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRspMultiError) AllErrors() []error { return m }

// LoginRspValidationError is the validation error returned by
// LoginRsp.Validate if the designated constraints aren't met.
type LoginRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRspValidationError) ErrorName() string { return "LoginRspValidationError" }

// Error satisfies the builtin error interface
func (e LoginRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRspValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserInfoValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserInfoValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ArticleNum

	// no validation rules for WoaNum

	// no validation rules for ReadNum

	// no validation rules for FansNum

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on GetUserInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserInfoReqMultiError,
// or nil if none found.
func (m *GetUserInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserInfoReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserInfoReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserInfoReqValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserInfoReqMultiError(errors)
	}

	return nil
}

// GetUserInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetUserInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoReqMultiError) AllErrors() []error { return m }

// GetUserInfoReqValidationError is the validation error returned by
// GetUserInfoReq.Validate if the designated constraints aren't met.
type GetUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoReqValidationError) ErrorName() string { return "GetUserInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoReqValidationError{}

// Validate checks the field values on GetUserInfoRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserInfoRspMultiError,
// or nil if none found.
func (m *GetUserInfoRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserInfoRspValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserInfoRspValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserInfoRspValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserInfoRspMultiError(errors)
	}

	return nil
}

// GetUserInfoRspMultiError is an error wrapping multiple validation errors
// returned by GetUserInfoRsp.ValidateAll() if the designated constraints
// aren't met.
type GetUserInfoRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoRspMultiError) AllErrors() []error { return m }

// GetUserInfoRspValidationError is the validation error returned by
// GetUserInfoRsp.Validate if the designated constraints aren't met.
type GetUserInfoRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoRspValidationError) ErrorName() string { return "GetUserInfoRspValidationError" }

// Error satisfies the builtin error interface
func (e GetUserInfoRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoRspValidationError{}

// Validate checks the field values on Article with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Article) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Article with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ArticleMultiError, or nil if none found.
func (m *Article) ValidateAll() error {
	return m.validate(true)
}

func (m *Article) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAuthor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ArticleValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ArticleValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArticleValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ArticleId

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for Url

	// no validation rules for Answer

	// no validation rules for PublishTs

	// no validation rules for Status

	if len(errors) > 0 {
		return ArticleMultiError(errors)
	}

	return nil
}

// ArticleMultiError is an error wrapping multiple validation errors returned
// by Article.ValidateAll() if the designated constraints aren't met.
type ArticleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleMultiError) AllErrors() []error { return m }

// ArticleValidationError is the validation error returned by Article.Validate
// if the designated constraints aren't met.
type ArticleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleValidationError) ErrorName() string { return "ArticleValidationError" }

// Error satisfies the builtin error interface
func (e ArticleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleValidationError{}

// Validate checks the field values on PublishArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PublishArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishArticleReqMultiError, or nil if none found.
func (m *PublishArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishArticleReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishArticleReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishArticleReqValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetArticle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishArticleReqValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishArticleReqValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArticle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishArticleReqValidationError{
				field:  "Article",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublishArticleReqMultiError(errors)
	}

	return nil
}

// PublishArticleReqMultiError is an error wrapping multiple validation errors
// returned by PublishArticleReq.ValidateAll() if the designated constraints
// aren't met.
type PublishArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishArticleReqMultiError) AllErrors() []error { return m }

// PublishArticleReqValidationError is the validation error returned by
// PublishArticleReq.Validate if the designated constraints aren't met.
type PublishArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishArticleReqValidationError) ErrorName() string {
	return "PublishArticleReqValidationError"
}

// Error satisfies the builtin error interface
func (e PublishArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishArticleReqValidationError{}

// Validate checks the field values on PublishArticleRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PublishArticleRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishArticleRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishArticleRspMultiError, or nil if none found.
func (m *PublishArticleRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishArticleRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return PublishArticleRspMultiError(errors)
	}

	return nil
}

// PublishArticleRspMultiError is an error wrapping multiple validation errors
// returned by PublishArticleRsp.ValidateAll() if the designated constraints
// aren't met.
type PublishArticleRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishArticleRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishArticleRspMultiError) AllErrors() []error { return m }

// PublishArticleRspValidationError is the validation error returned by
// PublishArticleRsp.Validate if the designated constraints aren't met.
type PublishArticleRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishArticleRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishArticleRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishArticleRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishArticleRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishArticleRspValidationError) ErrorName() string {
	return "PublishArticleRspValidationError"
}

// Error satisfies the builtin error interface
func (e PublishArticleRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishArticleRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishArticleRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishArticleRspValidationError{}

// Validate checks the field values on GetMyArticlesReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMyArticlesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyArticlesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyArticlesReqMultiError, or nil if none found.
func (m *GetMyArticlesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyArticlesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMyArticlesReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMyArticlesReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyArticlesReqValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMyArticlesReqMultiError(errors)
	}

	return nil
}

// GetMyArticlesReqMultiError is an error wrapping multiple validation errors
// returned by GetMyArticlesReq.ValidateAll() if the designated constraints
// aren't met.
type GetMyArticlesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyArticlesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyArticlesReqMultiError) AllErrors() []error { return m }

// GetMyArticlesReqValidationError is the validation error returned by
// GetMyArticlesReq.Validate if the designated constraints aren't met.
type GetMyArticlesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyArticlesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyArticlesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyArticlesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyArticlesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyArticlesReqValidationError) ErrorName() string { return "GetMyArticlesReqValidationError" }

// Error satisfies the builtin error interface
func (e GetMyArticlesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyArticlesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyArticlesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyArticlesReqValidationError{}

// Validate checks the field values on GetMyArticlesRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMyArticlesRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyArticlesRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyArticlesRspMultiError, or nil if none found.
func (m *GetMyArticlesRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyArticlesRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetArticles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMyArticlesRspValidationError{
						field:  fmt.Sprintf("Articles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMyArticlesRspValidationError{
						field:  fmt.Sprintf("Articles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMyArticlesRspValidationError{
					field:  fmt.Sprintf("Articles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMyArticlesRspMultiError(errors)
	}

	return nil
}

// GetMyArticlesRspMultiError is an error wrapping multiple validation errors
// returned by GetMyArticlesRsp.ValidateAll() if the designated constraints
// aren't met.
type GetMyArticlesRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyArticlesRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyArticlesRspMultiError) AllErrors() []error { return m }

// GetMyArticlesRspValidationError is the validation error returned by
// GetMyArticlesRsp.Validate if the designated constraints aren't met.
type GetMyArticlesRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyArticlesRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyArticlesRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyArticlesRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyArticlesRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyArticlesRspValidationError) ErrorName() string { return "GetMyArticlesRspValidationError" }

// Error satisfies the builtin error interface
func (e GetMyArticlesRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyArticlesRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyArticlesRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyArticlesRspValidationError{}

// Validate checks the field values on GetArticleReadersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleReadersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleReadersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleReadersReqMultiError, or nil if none found.
func (m *GetArticleReadersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleReadersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetArticleReadersReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetArticleReadersReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetArticleReadersReqValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return GetArticleReadersReqMultiError(errors)
	}

	return nil
}

// GetArticleReadersReqMultiError is an error wrapping multiple validation
// errors returned by GetArticleReadersReq.ValidateAll() if the designated
// constraints aren't met.
type GetArticleReadersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleReadersReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleReadersReqMultiError) AllErrors() []error { return m }

// GetArticleReadersReqValidationError is the validation error returned by
// GetArticleReadersReq.Validate if the designated constraints aren't met.
type GetArticleReadersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleReadersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleReadersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleReadersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleReadersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleReadersReqValidationError) ErrorName() string {
	return "GetArticleReadersReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleReadersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleReadersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleReadersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleReadersReqValidationError{}

// Validate checks the field values on GetArticleReadersRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleReadersRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleReadersRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleReadersRspMultiError, or nil if none found.
func (m *GetArticleReadersRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleReadersRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleReadersRspValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleReadersRspValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleReadersRspValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArticleReadersRspMultiError(errors)
	}

	return nil
}

// GetArticleReadersRspMultiError is an error wrapping multiple validation
// errors returned by GetArticleReadersRsp.ValidateAll() if the designated
// constraints aren't met.
type GetArticleReadersRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleReadersRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleReadersRspMultiError) AllErrors() []error { return m }

// GetArticleReadersRspValidationError is the validation error returned by
// GetArticleReadersRsp.Validate if the designated constraints aren't met.
type GetArticleReadersRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleReadersRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleReadersRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleReadersRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleReadersRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleReadersRspValidationError) ErrorName() string {
	return "GetArticleReadersRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleReadersRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleReadersRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleReadersRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleReadersRspValidationError{}

// Validate checks the field values on SetArticleStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetArticleStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetArticleStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetArticleStatusReqMultiError, or nil if none found.
func (m *SetArticleStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetArticleStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetArticleStatusReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetArticleStatusReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetArticleStatusReqValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ArticleId

	// no validation rules for Status

	if len(errors) > 0 {
		return SetArticleStatusReqMultiError(errors)
	}

	return nil
}

// SetArticleStatusReqMultiError is an error wrapping multiple validation
// errors returned by SetArticleStatusReq.ValidateAll() if the designated
// constraints aren't met.
type SetArticleStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetArticleStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetArticleStatusReqMultiError) AllErrors() []error { return m }

// SetArticleStatusReqValidationError is the validation error returned by
// SetArticleStatusReq.Validate if the designated constraints aren't met.
type SetArticleStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetArticleStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetArticleStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetArticleStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetArticleStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetArticleStatusReqValidationError) ErrorName() string {
	return "SetArticleStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetArticleStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetArticleStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetArticleStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetArticleStatusReqValidationError{}

// Validate checks the field values on SetArticleStatusRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetArticleStatusRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetArticleStatusRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetArticleStatusRspMultiError, or nil if none found.
func (m *SetArticleStatusRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetArticleStatusRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetArticleStatusRspMultiError(errors)
	}

	return nil
}

// SetArticleStatusRspMultiError is an error wrapping multiple validation
// errors returned by SetArticleStatusRsp.ValidateAll() if the designated
// constraints aren't met.
type SetArticleStatusRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetArticleStatusRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetArticleStatusRspMultiError) AllErrors() []error { return m }

// SetArticleStatusRspValidationError is the validation error returned by
// SetArticleStatusRsp.Validate if the designated constraints aren't met.
type SetArticleStatusRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetArticleStatusRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetArticleStatusRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetArticleStatusRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetArticleStatusRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetArticleStatusRspValidationError) ErrorName() string {
	return "SetArticleStatusRspValidationError"
}

// Error satisfies the builtin error interface
func (e SetArticleStatusRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetArticleStatusRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetArticleStatusRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetArticleStatusRspValidationError{}

// Validate checks the field values on ReadArticleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReadArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReadArticleReqMultiError,
// or nil if none found.
func (m *ReadArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadArticleReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadArticleReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadArticleReqValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return ReadArticleReqMultiError(errors)
	}

	return nil
}

// ReadArticleReqMultiError is an error wrapping multiple validation errors
// returned by ReadArticleReq.ValidateAll() if the designated constraints
// aren't met.
type ReadArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadArticleReqMultiError) AllErrors() []error { return m }

// ReadArticleReqValidationError is the validation error returned by
// ReadArticleReq.Validate if the designated constraints aren't met.
type ReadArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadArticleReqValidationError) ErrorName() string { return "ReadArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e ReadArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadArticleReqValidationError{}

// Validate checks the field values on ReadArticleRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReadArticleRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadArticleRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReadArticleRspMultiError,
// or nil if none found.
func (m *ReadArticleRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadArticleRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReadArticleRspMultiError(errors)
	}

	return nil
}

// ReadArticleRspMultiError is an error wrapping multiple validation errors
// returned by ReadArticleRsp.ValidateAll() if the designated constraints
// aren't met.
type ReadArticleRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadArticleRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadArticleRspMultiError) AllErrors() []error { return m }

// ReadArticleRspValidationError is the validation error returned by
// ReadArticleRsp.Validate if the designated constraints aren't met.
type ReadArticleRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadArticleRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadArticleRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadArticleRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadArticleRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadArticleRspValidationError) ErrorName() string { return "ReadArticleRspValidationError" }

// Error satisfies the builtin error interface
func (e ReadArticleRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadArticleRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadArticleRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadArticleRspValidationError{}

// Validate checks the field values on AnswerArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AnswerArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnswerArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AnswerArticleReqMultiError, or nil if none found.
func (m *AnswerArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AnswerArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnswerArticleReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnswerArticleReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnswerArticleReqValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Answer

	if len(errors) > 0 {
		return AnswerArticleReqMultiError(errors)
	}

	return nil
}

// AnswerArticleReqMultiError is an error wrapping multiple validation errors
// returned by AnswerArticleReq.ValidateAll() if the designated constraints
// aren't met.
type AnswerArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnswerArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnswerArticleReqMultiError) AllErrors() []error { return m }

// AnswerArticleReqValidationError is the validation error returned by
// AnswerArticleReq.Validate if the designated constraints aren't met.
type AnswerArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnswerArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnswerArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnswerArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnswerArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnswerArticleReqValidationError) ErrorName() string { return "AnswerArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e AnswerArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnswerArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnswerArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnswerArticleReqValidationError{}

// Validate checks the field values on AnswerArticleRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AnswerArticleRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnswerArticleRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AnswerArticleRspMultiError, or nil if none found.
func (m *AnswerArticleRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AnswerArticleRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AnswerArticleRspMultiError(errors)
	}

	return nil
}

// AnswerArticleRspMultiError is an error wrapping multiple validation errors
// returned by AnswerArticleRsp.ValidateAll() if the designated constraints
// aren't met.
type AnswerArticleRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnswerArticleRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnswerArticleRspMultiError) AllErrors() []error { return m }

// AnswerArticleRspValidationError is the validation error returned by
// AnswerArticleRsp.Validate if the designated constraints aren't met.
type AnswerArticleRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnswerArticleRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnswerArticleRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnswerArticleRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnswerArticleRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnswerArticleRspValidationError) ErrorName() string { return "AnswerArticleRspValidationError" }

// Error satisfies the builtin error interface
func (e AnswerArticleRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnswerArticleRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnswerArticleRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnswerArticleRspValidationError{}

// Validate checks the field values on GetShowArticlesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShowArticlesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShowArticlesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShowArticlesReqMultiError, or nil if none found.
func (m *GetShowArticlesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShowArticlesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShowArticlesReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShowArticlesReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShowArticlesReqValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Num

	// no validation rules for TransParams

	if len(errors) > 0 {
		return GetShowArticlesReqMultiError(errors)
	}

	return nil
}

// GetShowArticlesReqMultiError is an error wrapping multiple validation errors
// returned by GetShowArticlesReq.ValidateAll() if the designated constraints
// aren't met.
type GetShowArticlesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShowArticlesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShowArticlesReqMultiError) AllErrors() []error { return m }

// GetShowArticlesReqValidationError is the validation error returned by
// GetShowArticlesReq.Validate if the designated constraints aren't met.
type GetShowArticlesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShowArticlesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShowArticlesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShowArticlesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShowArticlesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShowArticlesReqValidationError) ErrorName() string {
	return "GetShowArticlesReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetShowArticlesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShowArticlesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShowArticlesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShowArticlesReqValidationError{}

// Validate checks the field values on GetShowArticlesRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShowArticlesRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShowArticlesRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShowArticlesRspMultiError, or nil if none found.
func (m *GetShowArticlesRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShowArticlesRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetArticles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetShowArticlesRspValidationError{
						field:  fmt.Sprintf("Articles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetShowArticlesRspValidationError{
						field:  fmt.Sprintf("Articles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetShowArticlesRspValidationError{
					field:  fmt.Sprintf("Articles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsEnd

	// no validation rules for TransParams

	if len(errors) > 0 {
		return GetShowArticlesRspMultiError(errors)
	}

	return nil
}

// GetShowArticlesRspMultiError is an error wrapping multiple validation errors
// returned by GetShowArticlesRsp.ValidateAll() if the designated constraints
// aren't met.
type GetShowArticlesRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShowArticlesRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShowArticlesRspMultiError) AllErrors() []error { return m }

// GetShowArticlesRspValidationError is the validation error returned by
// GetShowArticlesRsp.Validate if the designated constraints aren't met.
type GetShowArticlesRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShowArticlesRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShowArticlesRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShowArticlesRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShowArticlesRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShowArticlesRspValidationError) ErrorName() string {
	return "GetShowArticlesRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetShowArticlesRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShowArticlesRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShowArticlesRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShowArticlesRspValidationError{}

// Validate checks the field values on Woa with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Woa) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Woa with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WoaMultiError, or nil if none found.
func (m *Woa) ValidateAll() error {
	return m.validate(true)
}

func (m *Woa) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WoaValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WoaValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WoaValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WoaId

	// no validation rules for OriginId

	// no validation rules for Name

	// no validation rules for Desc

	// no validation rules for Answer

	// no validation rules for PublishTs

	// no validation rules for Status

	if len(errors) > 0 {
		return WoaMultiError(errors)
	}

	return nil
}

// WoaMultiError is an error wrapping multiple validation errors returned by
// Woa.ValidateAll() if the designated constraints aren't met.
type WoaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WoaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WoaMultiError) AllErrors() []error { return m }

// WoaValidationError is the validation error returned by Woa.Validate if the
// designated constraints aren't met.
type WoaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WoaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WoaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WoaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WoaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WoaValidationError) ErrorName() string { return "WoaValidationError" }

// Error satisfies the builtin error interface
func (e WoaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWoa.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WoaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WoaValidationError{}

// Validate checks the field values on PublishWoaReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublishWoaReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishWoaReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublishWoaReqMultiError, or
// nil if none found.
func (m *PublishWoaReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishWoaReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishWoaReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishWoaReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishWoaReqValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWoa()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishWoaReqValidationError{
					field:  "Woa",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishWoaReqValidationError{
					field:  "Woa",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWoa()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishWoaReqValidationError{
				field:  "Woa",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublishWoaReqMultiError(errors)
	}

	return nil
}

// PublishWoaReqMultiError is an error wrapping multiple validation errors
// returned by PublishWoaReq.ValidateAll() if the designated constraints
// aren't met.
type PublishWoaReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishWoaReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishWoaReqMultiError) AllErrors() []error { return m }

// PublishWoaReqValidationError is the validation error returned by
// PublishWoaReq.Validate if the designated constraints aren't met.
type PublishWoaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishWoaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishWoaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishWoaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishWoaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishWoaReqValidationError) ErrorName() string { return "PublishWoaReqValidationError" }

// Error satisfies the builtin error interface
func (e PublishWoaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishWoaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishWoaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishWoaReqValidationError{}

// Validate checks the field values on PublishWoaRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublishWoaRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishWoaRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublishWoaRspMultiError, or
// nil if none found.
func (m *PublishWoaRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishWoaRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WoaId

	if len(errors) > 0 {
		return PublishWoaRspMultiError(errors)
	}

	return nil
}

// PublishWoaRspMultiError is an error wrapping multiple validation errors
// returned by PublishWoaRsp.ValidateAll() if the designated constraints
// aren't met.
type PublishWoaRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishWoaRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishWoaRspMultiError) AllErrors() []error { return m }

// PublishWoaRspValidationError is the validation error returned by
// PublishWoaRsp.Validate if the designated constraints aren't met.
type PublishWoaRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishWoaRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishWoaRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishWoaRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishWoaRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishWoaRspValidationError) ErrorName() string { return "PublishWoaRspValidationError" }

// Error satisfies the builtin error interface
func (e PublishWoaRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishWoaRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishWoaRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishWoaRspValidationError{}

// Validate checks the field values on GetMyWoasReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMyWoasReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyWoasReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMyWoasReqMultiError, or
// nil if none found.
func (m *GetMyWoasReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyWoasReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMyWoasReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMyWoasReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyWoasReqValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMyWoasReqValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMyWoasReqValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyWoasReqValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMyWoasReqMultiError(errors)
	}

	return nil
}

// GetMyWoasReqMultiError is an error wrapping multiple validation errors
// returned by GetMyWoasReq.ValidateAll() if the designated constraints aren't met.
type GetMyWoasReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyWoasReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyWoasReqMultiError) AllErrors() []error { return m }

// GetMyWoasReqValidationError is the validation error returned by
// GetMyWoasReq.Validate if the designated constraints aren't met.
type GetMyWoasReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyWoasReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyWoasReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyWoasReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyWoasReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyWoasReqValidationError) ErrorName() string { return "GetMyWoasReqValidationError" }

// Error satisfies the builtin error interface
func (e GetMyWoasReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyWoasReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyWoasReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyWoasReqValidationError{}

// Validate checks the field values on GetMyWoasRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMyWoasRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyWoasRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMyWoasRspMultiError, or
// nil if none found.
func (m *GetMyWoasRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyWoasRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMyWoasRspValidationError{
						field:  fmt.Sprintf("Wos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMyWoasRspValidationError{
						field:  fmt.Sprintf("Wos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMyWoasRspValidationError{
					field:  fmt.Sprintf("Wos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMyWoasRspMultiError(errors)
	}

	return nil
}

// GetMyWoasRspMultiError is an error wrapping multiple validation errors
// returned by GetMyWoasRsp.ValidateAll() if the designated constraints aren't met.
type GetMyWoasRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyWoasRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyWoasRspMultiError) AllErrors() []error { return m }

// GetMyWoasRspValidationError is the validation error returned by
// GetMyWoasRsp.Validate if the designated constraints aren't met.
type GetMyWoasRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyWoasRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyWoasRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyWoasRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyWoasRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyWoasRspValidationError) ErrorName() string { return "GetMyWoasRspValidationError" }

// Error satisfies the builtin error interface
func (e GetMyWoasRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyWoasRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyWoasRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyWoasRspValidationError{}

// Validate checks the field values on GetWoaFansReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetWoaFansReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWoaFansReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetWoaFansReqMultiError, or
// nil if none found.
func (m *GetWoaFansReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWoaFansReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWoaFansReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWoaFansReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWoaFansReqValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WoaId

	if len(errors) > 0 {
		return GetWoaFansReqMultiError(errors)
	}

	return nil
}

// GetWoaFansReqMultiError is an error wrapping multiple validation errors
// returned by GetWoaFansReq.ValidateAll() if the designated constraints
// aren't met.
type GetWoaFansReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWoaFansReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWoaFansReqMultiError) AllErrors() []error { return m }

// GetWoaFansReqValidationError is the validation error returned by
// GetWoaFansReq.Validate if the designated constraints aren't met.
type GetWoaFansReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWoaFansReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWoaFansReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWoaFansReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWoaFansReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWoaFansReqValidationError) ErrorName() string { return "GetWoaFansReqValidationError" }

// Error satisfies the builtin error interface
func (e GetWoaFansReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWoaFansReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWoaFansReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWoaFansReqValidationError{}

// Validate checks the field values on GetWoaFansRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetWoaFansRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWoaFansRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetWoaFansRspMultiError, or
// nil if none found.
func (m *GetWoaFansRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWoaFansRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFans() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWoaFansRspValidationError{
						field:  fmt.Sprintf("Fans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWoaFansRspValidationError{
						field:  fmt.Sprintf("Fans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWoaFansRspValidationError{
					field:  fmt.Sprintf("Fans[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWoaFansRspMultiError(errors)
	}

	return nil
}

// GetWoaFansRspMultiError is an error wrapping multiple validation errors
// returned by GetWoaFansRsp.ValidateAll() if the designated constraints
// aren't met.
type GetWoaFansRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWoaFansRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWoaFansRspMultiError) AllErrors() []error { return m }

// GetWoaFansRspValidationError is the validation error returned by
// GetWoaFansRsp.Validate if the designated constraints aren't met.
type GetWoaFansRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWoaFansRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWoaFansRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWoaFansRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWoaFansRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWoaFansRspValidationError) ErrorName() string { return "GetWoaFansRspValidationError" }

// Error satisfies the builtin error interface
func (e GetWoaFansRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWoaFansRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWoaFansRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWoaFansRspValidationError{}

// Validate checks the field values on SetWoaStatusReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetWoaStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetWoaStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetWoaStatusReqMultiError, or nil if none found.
func (m *SetWoaStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetWoaStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetWoaStatusReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetWoaStatusReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetWoaStatusReqValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WoaId

	// no validation rules for Status

	if len(errors) > 0 {
		return SetWoaStatusReqMultiError(errors)
	}

	return nil
}

// SetWoaStatusReqMultiError is an error wrapping multiple validation errors
// returned by SetWoaStatusReq.ValidateAll() if the designated constraints
// aren't met.
type SetWoaStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetWoaStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetWoaStatusReqMultiError) AllErrors() []error { return m }

// SetWoaStatusReqValidationError is the validation error returned by
// SetWoaStatusReq.Validate if the designated constraints aren't met.
type SetWoaStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetWoaStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetWoaStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetWoaStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetWoaStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetWoaStatusReqValidationError) ErrorName() string { return "SetWoaStatusReqValidationError" }

// Error satisfies the builtin error interface
func (e SetWoaStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetWoaStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetWoaStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetWoaStatusReqValidationError{}

// Validate checks the field values on SetWoaStatusRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetWoaStatusRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetWoaStatusRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetWoaStatusRspMultiError, or nil if none found.
func (m *SetWoaStatusRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetWoaStatusRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetWoaStatusRspMultiError(errors)
	}

	return nil
}

// SetWoaStatusRspMultiError is an error wrapping multiple validation errors
// returned by SetWoaStatusRsp.ValidateAll() if the designated constraints
// aren't met.
type SetWoaStatusRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetWoaStatusRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetWoaStatusRspMultiError) AllErrors() []error { return m }

// SetWoaStatusRspValidationError is the validation error returned by
// SetWoaStatusRsp.Validate if the designated constraints aren't met.
type SetWoaStatusRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetWoaStatusRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetWoaStatusRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetWoaStatusRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetWoaStatusRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetWoaStatusRspValidationError) ErrorName() string { return "SetWoaStatusRspValidationError" }

// Error satisfies the builtin error interface
func (e SetWoaStatusRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetWoaStatusRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetWoaStatusRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetWoaStatusRspValidationError{}

// Validate checks the field values on FollowWoaReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FollowWoaReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowWoaReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FollowWoaReqMultiError, or
// nil if none found.
func (m *FollowWoaReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowWoaReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FollowWoaReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FollowWoaReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FollowWoaReqValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WoaId

	if len(errors) > 0 {
		return FollowWoaReqMultiError(errors)
	}

	return nil
}

// FollowWoaReqMultiError is an error wrapping multiple validation errors
// returned by FollowWoaReq.ValidateAll() if the designated constraints aren't met.
type FollowWoaReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowWoaReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowWoaReqMultiError) AllErrors() []error { return m }

// FollowWoaReqValidationError is the validation error returned by
// FollowWoaReq.Validate if the designated constraints aren't met.
type FollowWoaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowWoaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowWoaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowWoaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowWoaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowWoaReqValidationError) ErrorName() string { return "FollowWoaReqValidationError" }

// Error satisfies the builtin error interface
func (e FollowWoaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowWoaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowWoaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowWoaReqValidationError{}

// Validate checks the field values on FollowWoaRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FollowWoaRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowWoaRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FollowWoaRspMultiError, or
// nil if none found.
func (m *FollowWoaRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowWoaRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FollowWoaRspMultiError(errors)
	}

	return nil
}

// FollowWoaRspMultiError is an error wrapping multiple validation errors
// returned by FollowWoaRsp.ValidateAll() if the designated constraints aren't met.
type FollowWoaRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowWoaRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowWoaRspMultiError) AllErrors() []error { return m }

// FollowWoaRspValidationError is the validation error returned by
// FollowWoaRsp.Validate if the designated constraints aren't met.
type FollowWoaRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowWoaRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowWoaRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowWoaRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowWoaRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowWoaRspValidationError) ErrorName() string { return "FollowWoaRspValidationError" }

// Error satisfies the builtin error interface
func (e FollowWoaRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowWoaRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowWoaRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowWoaRspValidationError{}

// Validate checks the field values on AnswerWoaReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AnswerWoaReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnswerWoaReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AnswerWoaReqMultiError, or
// nil if none found.
func (m *AnswerWoaReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AnswerWoaReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnswerWoaReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnswerWoaReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnswerWoaReqValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Answer

	if len(errors) > 0 {
		return AnswerWoaReqMultiError(errors)
	}

	return nil
}

// AnswerWoaReqMultiError is an error wrapping multiple validation errors
// returned by AnswerWoaReq.ValidateAll() if the designated constraints aren't met.
type AnswerWoaReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnswerWoaReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnswerWoaReqMultiError) AllErrors() []error { return m }

// AnswerWoaReqValidationError is the validation error returned by
// AnswerWoaReq.Validate if the designated constraints aren't met.
type AnswerWoaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnswerWoaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnswerWoaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnswerWoaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnswerWoaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnswerWoaReqValidationError) ErrorName() string { return "AnswerWoaReqValidationError" }

// Error satisfies the builtin error interface
func (e AnswerWoaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnswerWoaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnswerWoaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnswerWoaReqValidationError{}

// Validate checks the field values on AnswerWoaRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AnswerWoaRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnswerWoaRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AnswerWoaRspMultiError, or
// nil if none found.
func (m *AnswerWoaRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AnswerWoaRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AnswerWoaRspMultiError(errors)
	}

	return nil
}

// AnswerWoaRspMultiError is an error wrapping multiple validation errors
// returned by AnswerWoaRsp.ValidateAll() if the designated constraints aren't met.
type AnswerWoaRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnswerWoaRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnswerWoaRspMultiError) AllErrors() []error { return m }

// AnswerWoaRspValidationError is the validation error returned by
// AnswerWoaRsp.Validate if the designated constraints aren't met.
type AnswerWoaRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnswerWoaRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnswerWoaRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnswerWoaRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnswerWoaRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnswerWoaRspValidationError) ErrorName() string { return "AnswerWoaRspValidationError" }

// Error satisfies the builtin error interface
func (e AnswerWoaRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnswerWoaRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnswerWoaRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnswerWoaRspValidationError{}
