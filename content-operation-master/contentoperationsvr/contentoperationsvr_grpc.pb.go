// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.5.0
// source: contentoperationsvr.proto

package contentoperationsvr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContentOperationSvrClient is the client API for ContentOperationSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentOperationSvrClient interface {
	// Login 用户授权登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// GetUserInfo 查询用户信息
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRsp, error)
	// PublishArticle 发布文章
	PublishArticle(ctx context.Context, in *PublishArticleReq, opts ...grpc.CallOption) (*PublishArticleRsp, error)
	// SetArticleStatus 设置文章状态
	SetArticleStatus(ctx context.Context, in *SetArticleStatusReq, opts ...grpc.CallOption) (*SetArticleStatusRsp, error)
	// GetMyArticles 查询我的文章列表
	GetMyArticles(ctx context.Context, in *GetMyArticlesReq, opts ...grpc.CallOption) (*GetMyArticlesRsp, error)
	// GetArticleReaders 查询文章阅读列表
	GetArticleReaders(ctx context.Context, in *GetArticleReadersReq, opts ...grpc.CallOption) (*GetArticleReadersRsp, error)
	// ReadArticle 开始读文章
	ReadArticle(ctx context.Context, in *ReadArticleReq, opts ...grpc.CallOption) (*ReadArticleRsp, error)
	// AnswerArticle 回复文章阅读
	AnswerArticle(ctx context.Context, in *AnswerArticleReq, opts ...grpc.CallOption) (*AnswerArticleRsp, error)
	// GetShowArticles 查询外显文章
	GetShowArticles(ctx context.Context, in *GetShowArticlesReq, opts ...grpc.CallOption) (*GetShowArticlesRsp, error)
	// PublishWoa 发布公众号
	PublishWoa(ctx context.Context, in *PublishWoaReq, opts ...grpc.CallOption) (*PublishWoaRsp, error)
	// SetWoaStatus 设置文章状态
	SetWoaStatus(ctx context.Context, in *SetWoaStatusReq, opts ...grpc.CallOption) (*SetWoaStatusRsp, error)
	// GetMyWoas 查询我的公众号列表
	GetMyWoas(ctx context.Context, in *GetMyWoasReq, opts ...grpc.CallOption) (*GetMyWoasRsp, error)
	// GetWoaFans 查询公众号关注列表
	GetWoaFans(ctx context.Context, in *GetWoaFansReq, opts ...grpc.CallOption) (*GetWoaFansRsp, error)
	// FollowWoa 关注公众号
	FollowWoa(ctx context.Context, in *FollowWoaReq, opts ...grpc.CallOption) (*FollowWoaRsp, error)
	// AnswerWoa 回复公众号
	AnswerWoa(ctx context.Context, in *AnswerWoaReq, opts ...grpc.CallOption) (*AnswerWoaRsp, error)
}

type contentOperationSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewContentOperationSvrClient(cc grpc.ClientConnInterface) ContentOperationSvrClient {
	return &contentOperationSvrClient{cc}
}

func (c *contentOperationSvrClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/contentoperationsvr.ContentOperationSvr/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentOperationSvrClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRsp, error) {
	out := new(GetUserInfoRsp)
	err := c.cc.Invoke(ctx, "/contentoperationsvr.ContentOperationSvr/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentOperationSvrClient) PublishArticle(ctx context.Context, in *PublishArticleReq, opts ...grpc.CallOption) (*PublishArticleRsp, error) {
	out := new(PublishArticleRsp)
	err := c.cc.Invoke(ctx, "/contentoperationsvr.ContentOperationSvr/PublishArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentOperationSvrClient) SetArticleStatus(ctx context.Context, in *SetArticleStatusReq, opts ...grpc.CallOption) (*SetArticleStatusRsp, error) {
	out := new(SetArticleStatusRsp)
	err := c.cc.Invoke(ctx, "/contentoperationsvr.ContentOperationSvr/SetArticleStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentOperationSvrClient) GetMyArticles(ctx context.Context, in *GetMyArticlesReq, opts ...grpc.CallOption) (*GetMyArticlesRsp, error) {
	out := new(GetMyArticlesRsp)
	err := c.cc.Invoke(ctx, "/contentoperationsvr.ContentOperationSvr/GetMyArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentOperationSvrClient) GetArticleReaders(ctx context.Context, in *GetArticleReadersReq, opts ...grpc.CallOption) (*GetArticleReadersRsp, error) {
	out := new(GetArticleReadersRsp)
	err := c.cc.Invoke(ctx, "/contentoperationsvr.ContentOperationSvr/GetArticleReaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentOperationSvrClient) ReadArticle(ctx context.Context, in *ReadArticleReq, opts ...grpc.CallOption) (*ReadArticleRsp, error) {
	out := new(ReadArticleRsp)
	err := c.cc.Invoke(ctx, "/contentoperationsvr.ContentOperationSvr/ReadArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentOperationSvrClient) AnswerArticle(ctx context.Context, in *AnswerArticleReq, opts ...grpc.CallOption) (*AnswerArticleRsp, error) {
	out := new(AnswerArticleRsp)
	err := c.cc.Invoke(ctx, "/contentoperationsvr.ContentOperationSvr/AnswerArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentOperationSvrClient) GetShowArticles(ctx context.Context, in *GetShowArticlesReq, opts ...grpc.CallOption) (*GetShowArticlesRsp, error) {
	out := new(GetShowArticlesRsp)
	err := c.cc.Invoke(ctx, "/contentoperationsvr.ContentOperationSvr/GetShowArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentOperationSvrClient) PublishWoa(ctx context.Context, in *PublishWoaReq, opts ...grpc.CallOption) (*PublishWoaRsp, error) {
	out := new(PublishWoaRsp)
	err := c.cc.Invoke(ctx, "/contentoperationsvr.ContentOperationSvr/PublishWoa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentOperationSvrClient) SetWoaStatus(ctx context.Context, in *SetWoaStatusReq, opts ...grpc.CallOption) (*SetWoaStatusRsp, error) {
	out := new(SetWoaStatusRsp)
	err := c.cc.Invoke(ctx, "/contentoperationsvr.ContentOperationSvr/SetWoaStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentOperationSvrClient) GetMyWoas(ctx context.Context, in *GetMyWoasReq, opts ...grpc.CallOption) (*GetMyWoasRsp, error) {
	out := new(GetMyWoasRsp)
	err := c.cc.Invoke(ctx, "/contentoperationsvr.ContentOperationSvr/GetMyWoas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentOperationSvrClient) GetWoaFans(ctx context.Context, in *GetWoaFansReq, opts ...grpc.CallOption) (*GetWoaFansRsp, error) {
	out := new(GetWoaFansRsp)
	err := c.cc.Invoke(ctx, "/contentoperationsvr.ContentOperationSvr/GetWoaFans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentOperationSvrClient) FollowWoa(ctx context.Context, in *FollowWoaReq, opts ...grpc.CallOption) (*FollowWoaRsp, error) {
	out := new(FollowWoaRsp)
	err := c.cc.Invoke(ctx, "/contentoperationsvr.ContentOperationSvr/FollowWoa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentOperationSvrClient) AnswerWoa(ctx context.Context, in *AnswerWoaReq, opts ...grpc.CallOption) (*AnswerWoaRsp, error) {
	out := new(AnswerWoaRsp)
	err := c.cc.Invoke(ctx, "/contentoperationsvr.ContentOperationSvr/AnswerWoa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentOperationSvrServer is the server API for ContentOperationSvr service.
// All implementations must embed UnimplementedContentOperationSvrServer
// for forward compatibility
type ContentOperationSvrServer interface {
	// Login 用户授权登录
	Login(context.Context, *LoginReq) (*LoginRsp, error)
	// GetUserInfo 查询用户信息
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoRsp, error)
	// PublishArticle 发布文章
	PublishArticle(context.Context, *PublishArticleReq) (*PublishArticleRsp, error)
	// SetArticleStatus 设置文章状态
	SetArticleStatus(context.Context, *SetArticleStatusReq) (*SetArticleStatusRsp, error)
	// GetMyArticles 查询我的文章列表
	GetMyArticles(context.Context, *GetMyArticlesReq) (*GetMyArticlesRsp, error)
	// GetArticleReaders 查询文章阅读列表
	GetArticleReaders(context.Context, *GetArticleReadersReq) (*GetArticleReadersRsp, error)
	// ReadArticle 开始读文章
	ReadArticle(context.Context, *ReadArticleReq) (*ReadArticleRsp, error)
	// AnswerArticle 回复文章阅读
	AnswerArticle(context.Context, *AnswerArticleReq) (*AnswerArticleRsp, error)
	// GetShowArticles 查询外显文章
	GetShowArticles(context.Context, *GetShowArticlesReq) (*GetShowArticlesRsp, error)
	// PublishWoa 发布公众号
	PublishWoa(context.Context, *PublishWoaReq) (*PublishWoaRsp, error)
	// SetWoaStatus 设置文章状态
	SetWoaStatus(context.Context, *SetWoaStatusReq) (*SetWoaStatusRsp, error)
	// GetMyWoas 查询我的公众号列表
	GetMyWoas(context.Context, *GetMyWoasReq) (*GetMyWoasRsp, error)
	// GetWoaFans 查询公众号关注列表
	GetWoaFans(context.Context, *GetWoaFansReq) (*GetWoaFansRsp, error)
	// FollowWoa 关注公众号
	FollowWoa(context.Context, *FollowWoaReq) (*FollowWoaRsp, error)
	// AnswerWoa 回复公众号
	AnswerWoa(context.Context, *AnswerWoaReq) (*AnswerWoaRsp, error)
	mustEmbedUnimplementedContentOperationSvrServer()
}

// UnimplementedContentOperationSvrServer must be embedded to have forward compatible implementations.
type UnimplementedContentOperationSvrServer struct {
}

func (UnimplementedContentOperationSvrServer) Login(context.Context, *LoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedContentOperationSvrServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedContentOperationSvrServer) PublishArticle(context.Context, *PublishArticleReq) (*PublishArticleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishArticle not implemented")
}
func (UnimplementedContentOperationSvrServer) SetArticleStatus(context.Context, *SetArticleStatusReq) (*SetArticleStatusRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetArticleStatus not implemented")
}
func (UnimplementedContentOperationSvrServer) GetMyArticles(context.Context, *GetMyArticlesReq) (*GetMyArticlesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyArticles not implemented")
}
func (UnimplementedContentOperationSvrServer) GetArticleReaders(context.Context, *GetArticleReadersReq) (*GetArticleReadersRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleReaders not implemented")
}
func (UnimplementedContentOperationSvrServer) ReadArticle(context.Context, *ReadArticleReq) (*ReadArticleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadArticle not implemented")
}
func (UnimplementedContentOperationSvrServer) AnswerArticle(context.Context, *AnswerArticleReq) (*AnswerArticleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerArticle not implemented")
}
func (UnimplementedContentOperationSvrServer) GetShowArticles(context.Context, *GetShowArticlesReq) (*GetShowArticlesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShowArticles not implemented")
}
func (UnimplementedContentOperationSvrServer) PublishWoa(context.Context, *PublishWoaReq) (*PublishWoaRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishWoa not implemented")
}
func (UnimplementedContentOperationSvrServer) SetWoaStatus(context.Context, *SetWoaStatusReq) (*SetWoaStatusRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWoaStatus not implemented")
}
func (UnimplementedContentOperationSvrServer) GetMyWoas(context.Context, *GetMyWoasReq) (*GetMyWoasRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyWoas not implemented")
}
func (UnimplementedContentOperationSvrServer) GetWoaFans(context.Context, *GetWoaFansReq) (*GetWoaFansRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWoaFans not implemented")
}
func (UnimplementedContentOperationSvrServer) FollowWoa(context.Context, *FollowWoaReq) (*FollowWoaRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowWoa not implemented")
}
func (UnimplementedContentOperationSvrServer) AnswerWoa(context.Context, *AnswerWoaReq) (*AnswerWoaRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerWoa not implemented")
}
func (UnimplementedContentOperationSvrServer) mustEmbedUnimplementedContentOperationSvrServer() {}

// UnsafeContentOperationSvrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentOperationSvrServer will
// result in compilation errors.
type UnsafeContentOperationSvrServer interface {
	mustEmbedUnimplementedContentOperationSvrServer()
}

func RegisterContentOperationSvrServer(s grpc.ServiceRegistrar, srv ContentOperationSvrServer) {
	s.RegisterService(&ContentOperationSvr_ServiceDesc, srv)
}

func _ContentOperationSvr_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentOperationSvrServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentoperationsvr.ContentOperationSvr/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentOperationSvrServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentOperationSvr_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentOperationSvrServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentoperationsvr.ContentOperationSvr/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentOperationSvrServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentOperationSvr_PublishArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentOperationSvrServer).PublishArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentoperationsvr.ContentOperationSvr/PublishArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentOperationSvrServer).PublishArticle(ctx, req.(*PublishArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentOperationSvr_SetArticleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetArticleStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentOperationSvrServer).SetArticleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentoperationsvr.ContentOperationSvr/SetArticleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentOperationSvrServer).SetArticleStatus(ctx, req.(*SetArticleStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentOperationSvr_GetMyArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyArticlesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentOperationSvrServer).GetMyArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentoperationsvr.ContentOperationSvr/GetMyArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentOperationSvrServer).GetMyArticles(ctx, req.(*GetMyArticlesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentOperationSvr_GetArticleReaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleReadersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentOperationSvrServer).GetArticleReaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentoperationsvr.ContentOperationSvr/GetArticleReaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentOperationSvrServer).GetArticleReaders(ctx, req.(*GetArticleReadersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentOperationSvr_ReadArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentOperationSvrServer).ReadArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentoperationsvr.ContentOperationSvr/ReadArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentOperationSvrServer).ReadArticle(ctx, req.(*ReadArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentOperationSvr_AnswerArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentOperationSvrServer).AnswerArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentoperationsvr.ContentOperationSvr/AnswerArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentOperationSvrServer).AnswerArticle(ctx, req.(*AnswerArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentOperationSvr_GetShowArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShowArticlesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentOperationSvrServer).GetShowArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentoperationsvr.ContentOperationSvr/GetShowArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentOperationSvrServer).GetShowArticles(ctx, req.(*GetShowArticlesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentOperationSvr_PublishWoa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishWoaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentOperationSvrServer).PublishWoa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentoperationsvr.ContentOperationSvr/PublishWoa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentOperationSvrServer).PublishWoa(ctx, req.(*PublishWoaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentOperationSvr_SetWoaStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWoaStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentOperationSvrServer).SetWoaStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentoperationsvr.ContentOperationSvr/SetWoaStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentOperationSvrServer).SetWoaStatus(ctx, req.(*SetWoaStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentOperationSvr_GetMyWoas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyWoasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentOperationSvrServer).GetMyWoas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentoperationsvr.ContentOperationSvr/GetMyWoas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentOperationSvrServer).GetMyWoas(ctx, req.(*GetMyWoasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentOperationSvr_GetWoaFans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWoaFansReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentOperationSvrServer).GetWoaFans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentoperationsvr.ContentOperationSvr/GetWoaFans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentOperationSvrServer).GetWoaFans(ctx, req.(*GetWoaFansReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentOperationSvr_FollowWoa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowWoaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentOperationSvrServer).FollowWoa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentoperationsvr.ContentOperationSvr/FollowWoa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentOperationSvrServer).FollowWoa(ctx, req.(*FollowWoaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentOperationSvr_AnswerWoa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerWoaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentOperationSvrServer).AnswerWoa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentoperationsvr.ContentOperationSvr/AnswerWoa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentOperationSvrServer).AnswerWoa(ctx, req.(*AnswerWoaReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentOperationSvr_ServiceDesc is the grpc.ServiceDesc for ContentOperationSvr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentOperationSvr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contentoperationsvr.ContentOperationSvr",
	HandlerType: (*ContentOperationSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ContentOperationSvr_Login_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _ContentOperationSvr_GetUserInfo_Handler,
		},
		{
			MethodName: "PublishArticle",
			Handler:    _ContentOperationSvr_PublishArticle_Handler,
		},
		{
			MethodName: "SetArticleStatus",
			Handler:    _ContentOperationSvr_SetArticleStatus_Handler,
		},
		{
			MethodName: "GetMyArticles",
			Handler:    _ContentOperationSvr_GetMyArticles_Handler,
		},
		{
			MethodName: "GetArticleReaders",
			Handler:    _ContentOperationSvr_GetArticleReaders_Handler,
		},
		{
			MethodName: "ReadArticle",
			Handler:    _ContentOperationSvr_ReadArticle_Handler,
		},
		{
			MethodName: "AnswerArticle",
			Handler:    _ContentOperationSvr_AnswerArticle_Handler,
		},
		{
			MethodName: "GetShowArticles",
			Handler:    _ContentOperationSvr_GetShowArticles_Handler,
		},
		{
			MethodName: "PublishWoa",
			Handler:    _ContentOperationSvr_PublishWoa_Handler,
		},
		{
			MethodName: "SetWoaStatus",
			Handler:    _ContentOperationSvr_SetWoaStatus_Handler,
		},
		{
			MethodName: "GetMyWoas",
			Handler:    _ContentOperationSvr_GetMyWoas_Handler,
		},
		{
			MethodName: "GetWoaFans",
			Handler:    _ContentOperationSvr_GetWoaFans_Handler,
		},
		{
			MethodName: "FollowWoa",
			Handler:    _ContentOperationSvr_FollowWoa_Handler,
		},
		{
			MethodName: "AnswerWoa",
			Handler:    _ContentOperationSvr_AnswerWoa_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contentoperationsvr.proto",
}
