// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.5.0
// source: msgsvr.proto

package msgsvr

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMsgSvrCheckSignature = "/msgsvr.MsgSvr/CheckSignature"
const OperationMsgSvrMessage = "/msgsvr.MsgSvr/Message"

type MsgSvrHTTPServer interface {
	// CheckSignature CheckSignature 签名校验接口
	CheckSignature(context.Context, *CheckSignatureReq) (*CheckSignatureRsp, error)
	// Message Message 微信公众号消息回调接口（所有微信公众号消息使用这个接口）
	Message(context.Context, *MessageReq) (*MessageRsp, error)
}

func RegisterMsgSvrHTTPServer(s *http.Server, srv MsgSvrHTTPServer) {
	r := s.Route("/")
	r.GET("/content-operation-proxy/msgsvr/message", _MsgSvr_CheckSignature0_HTTP_Handler(srv))
	r.POST("/content-operation-proxy/msgsvr/message", _MsgSvr_Message0_HTTP_Handler(srv))
}

func _MsgSvr_CheckSignature0_HTTP_Handler(srv MsgSvrHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckSignatureReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMsgSvrCheckSignature)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckSignature(ctx, req.(*CheckSignatureReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckSignatureRsp)
		return ctx.Result(200, reply.Echostr)
	}
}

func _MsgSvr_Message0_HTTP_Handler(srv MsgSvrHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MessageReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMsgSvrMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Message(ctx, req.(*MessageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MessageRsp)
		return ctx.Result(200, reply)
	}
}

type MsgSvrHTTPClient interface {
	CheckSignature(ctx context.Context, req *CheckSignatureReq, opts ...http.CallOption) (rsp *CheckSignatureRsp, err error)
	Message(ctx context.Context, req *MessageReq, opts ...http.CallOption) (rsp *MessageRsp, err error)
}

type MsgSvrHTTPClientImpl struct {
	cc *http.Client
}

func NewMsgSvrHTTPClient(client *http.Client) MsgSvrHTTPClient {
	return &MsgSvrHTTPClientImpl{client}
}

func (c *MsgSvrHTTPClientImpl) CheckSignature(ctx context.Context, in *CheckSignatureReq, opts ...http.CallOption) (*CheckSignatureRsp, error) {
	var out CheckSignatureRsp
	pattern := "/content-operation-proxy/msgsvr/message"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMsgSvrCheckSignature))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out.Echostr, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MsgSvrHTTPClientImpl) Message(ctx context.Context, in *MessageReq, opts ...http.CallOption) (*MessageRsp, error) {
	var out MessageRsp
	pattern := "/content-operation-proxy/msgsvr/message"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMsgSvrMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
