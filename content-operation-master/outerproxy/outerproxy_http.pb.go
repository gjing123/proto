// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.5.0
// source: outerproxy.proto

package outerproxy

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOpenAISvrCreateChatCompletion = "/outerproxy.OpenAISvr/CreateChatCompletion"
const OperationOpenAISvrCreateImage = "/outerproxy.OpenAISvr/CreateImage"

type OpenAISvrHTTPServer interface {
	// CreateChatCompletion CreateChatCompletion 用户登录接口
	CreateChatCompletion(context.Context, *CreateChatCompletionReq) (*CreateChatCompletionRsp, error)
	// CreateImage CreateImage 创建图片
	CreateImage(context.Context, *CreateImageReq) (*CreateImageRsp, error)
}

func RegisterOpenAISvrHTTPServer(s *http.Server, srv OpenAISvrHTTPServer) {
	r := s.Route("/")
	r.POST("/content-operation-proxy/outerproxy-openaisvr/create-chat-completion", _OpenAISvr_CreateChatCompletion0_HTTP_Handler(srv))
	r.POST("/content-operation-proxy/outerproxy-openaisvr/create-image", _OpenAISvr_CreateImage0_HTTP_Handler(srv))
}

func _OpenAISvr_CreateChatCompletion0_HTTP_Handler(srv OpenAISvrHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateChatCompletionReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOpenAISvrCreateChatCompletion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateChatCompletion(ctx, req.(*CreateChatCompletionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateChatCompletionRsp)
		return ctx.Result(200, reply)
	}
}

func _OpenAISvr_CreateImage0_HTTP_Handler(srv OpenAISvrHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateImageReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOpenAISvrCreateImage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateImage(ctx, req.(*CreateImageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateImageRsp)
		return ctx.Result(200, reply)
	}
}

type OpenAISvrHTTPClient interface {
	CreateChatCompletion(ctx context.Context, req *CreateChatCompletionReq, opts ...http.CallOption) (rsp *CreateChatCompletionRsp, err error)
	CreateImage(ctx context.Context, req *CreateImageReq, opts ...http.CallOption) (rsp *CreateImageRsp, err error)
}

type OpenAISvrHTTPClientImpl struct {
	cc *http.Client
}

func NewOpenAISvrHTTPClient(client *http.Client) OpenAISvrHTTPClient {
	return &OpenAISvrHTTPClientImpl{client}
}

func (c *OpenAISvrHTTPClientImpl) CreateChatCompletion(ctx context.Context, in *CreateChatCompletionReq, opts ...http.CallOption) (*CreateChatCompletionRsp, error) {
	var out CreateChatCompletionRsp
	pattern := "/content-operation-proxy/outerproxy-openaisvr/create-chat-completion"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOpenAISvrCreateChatCompletion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OpenAISvrHTTPClientImpl) CreateImage(ctx context.Context, in *CreateImageReq, opts ...http.CallOption) (*CreateImageRsp, error) {
	var out CreateImageRsp
	pattern := "/content-operation-proxy/outerproxy-openaisvr/create-image"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOpenAISvrCreateImage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
