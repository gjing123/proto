// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.5.0
// source: outerproxy.proto

package outerproxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpenAISvrClient is the client API for OpenAISvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenAISvrClient interface {
	// CreateChatCompletion 用户登录接口
	CreateChatCompletion(ctx context.Context, in *CreateChatCompletionReq, opts ...grpc.CallOption) (*CreateChatCompletionRsp, error)
	// CreateImage 创建图片
	CreateImage(ctx context.Context, in *CreateImageReq, opts ...grpc.CallOption) (*CreateImageRsp, error)
}

type openAISvrClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenAISvrClient(cc grpc.ClientConnInterface) OpenAISvrClient {
	return &openAISvrClient{cc}
}

func (c *openAISvrClient) CreateChatCompletion(ctx context.Context, in *CreateChatCompletionReq, opts ...grpc.CallOption) (*CreateChatCompletionRsp, error) {
	out := new(CreateChatCompletionRsp)
	err := c.cc.Invoke(ctx, "/outerproxy.OpenAISvr/CreateChatCompletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAISvrClient) CreateImage(ctx context.Context, in *CreateImageReq, opts ...grpc.CallOption) (*CreateImageRsp, error) {
	out := new(CreateImageRsp)
	err := c.cc.Invoke(ctx, "/outerproxy.OpenAISvr/CreateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenAISvrServer is the server API for OpenAISvr service.
// All implementations must embed UnimplementedOpenAISvrServer
// for forward compatibility
type OpenAISvrServer interface {
	// CreateChatCompletion 用户登录接口
	CreateChatCompletion(context.Context, *CreateChatCompletionReq) (*CreateChatCompletionRsp, error)
	// CreateImage 创建图片
	CreateImage(context.Context, *CreateImageReq) (*CreateImageRsp, error)
	mustEmbedUnimplementedOpenAISvrServer()
}

// UnimplementedOpenAISvrServer must be embedded to have forward compatible implementations.
type UnimplementedOpenAISvrServer struct {
}

func (UnimplementedOpenAISvrServer) CreateChatCompletion(context.Context, *CreateChatCompletionReq) (*CreateChatCompletionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatCompletion not implemented")
}
func (UnimplementedOpenAISvrServer) CreateImage(context.Context, *CreateImageReq) (*CreateImageRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImage not implemented")
}
func (UnimplementedOpenAISvrServer) mustEmbedUnimplementedOpenAISvrServer() {}

// UnsafeOpenAISvrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenAISvrServer will
// result in compilation errors.
type UnsafeOpenAISvrServer interface {
	mustEmbedUnimplementedOpenAISvrServer()
}

func RegisterOpenAISvrServer(s grpc.ServiceRegistrar, srv OpenAISvrServer) {
	s.RegisterService(&OpenAISvr_ServiceDesc, srv)
}

func _OpenAISvr_CreateChatCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatCompletionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAISvrServer).CreateChatCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/outerproxy.OpenAISvr/CreateChatCompletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAISvrServer).CreateChatCompletion(ctx, req.(*CreateChatCompletionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAISvr_CreateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAISvrServer).CreateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/outerproxy.OpenAISvr/CreateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAISvrServer).CreateImage(ctx, req.(*CreateImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenAISvr_ServiceDesc is the grpc.ServiceDesc for OpenAISvr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenAISvr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "outerproxy.OpenAISvr",
	HandlerType: (*OpenAISvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChatCompletion",
			Handler:    _OpenAISvr_CreateChatCompletion_Handler,
		},
		{
			MethodName: "CreateImage",
			Handler:    _OpenAISvr_CreateImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "outerproxy.proto",
}
