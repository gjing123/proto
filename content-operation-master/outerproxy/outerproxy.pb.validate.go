// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: outerproxy.proto

package outerproxy

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ChatCompletionMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatCompletionMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatCompletionMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatCompletionMessageMultiError, or nil if none found.
func (m *ChatCompletionMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatCompletionMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := ChatCompletionMessageValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := ChatCompletionMessageValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChatCompletionMessageMultiError(errors)
	}

	return nil
}

// ChatCompletionMessageMultiError is an error wrapping multiple validation
// errors returned by ChatCompletionMessage.ValidateAll() if the designated
// constraints aren't met.
type ChatCompletionMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatCompletionMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatCompletionMessageMultiError) AllErrors() []error { return m }

// ChatCompletionMessageValidationError is the validation error returned by
// ChatCompletionMessage.Validate if the designated constraints aren't met.
type ChatCompletionMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatCompletionMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatCompletionMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatCompletionMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatCompletionMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatCompletionMessageValidationError) ErrorName() string {
	return "ChatCompletionMessageValidationError"
}

// Error satisfies the builtin error interface
func (e ChatCompletionMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatCompletionMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatCompletionMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatCompletionMessageValidationError{}

// Validate checks the field values on CreateChatCompletionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChatCompletionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChatCompletionReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChatCompletionReqMultiError, or nil if none found.
func (m *CreateChatCompletionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChatCompletionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetModel()) < 1 {
		err := CreateChatCompletionReqValidationError{
			field:  "Model",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserid()) < 1 {
		err := CreateChatCompletionReqValidationError{
			field:  "Userid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMessages()) < 1 {
		err := CreateChatCompletionReqValidationError{
			field:  "Messages",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateChatCompletionReqValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateChatCompletionReqValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateChatCompletionReqValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateChatCompletionReqMultiError(errors)
	}

	return nil
}

// CreateChatCompletionReqMultiError is an error wrapping multiple validation
// errors returned by CreateChatCompletionReq.ValidateAll() if the designated
// constraints aren't met.
type CreateChatCompletionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChatCompletionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChatCompletionReqMultiError) AllErrors() []error { return m }

// CreateChatCompletionReqValidationError is the validation error returned by
// CreateChatCompletionReq.Validate if the designated constraints aren't met.
type CreateChatCompletionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChatCompletionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChatCompletionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChatCompletionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChatCompletionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChatCompletionReqValidationError) ErrorName() string {
	return "CreateChatCompletionReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChatCompletionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChatCompletionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChatCompletionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChatCompletionReqValidationError{}

// Validate checks the field values on CreateChatCompletionRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChatCompletionRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChatCompletionRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChatCompletionRspMultiError, or nil if none found.
func (m *CreateChatCompletionRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChatCompletionRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if len(errors) > 0 {
		return CreateChatCompletionRspMultiError(errors)
	}

	return nil
}

// CreateChatCompletionRspMultiError is an error wrapping multiple validation
// errors returned by CreateChatCompletionRsp.ValidateAll() if the designated
// constraints aren't met.
type CreateChatCompletionRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChatCompletionRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChatCompletionRspMultiError) AllErrors() []error { return m }

// CreateChatCompletionRspValidationError is the validation error returned by
// CreateChatCompletionRsp.Validate if the designated constraints aren't met.
type CreateChatCompletionRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChatCompletionRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChatCompletionRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChatCompletionRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChatCompletionRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChatCompletionRspValidationError) ErrorName() string {
	return "CreateChatCompletionRspValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChatCompletionRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChatCompletionRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChatCompletionRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChatCompletionRspValidationError{}

// Validate checks the field values on CreateImageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateImageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateImageReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateImageReqMultiError,
// or nil if none found.
func (m *CreateImageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateImageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prompt

	if len(errors) > 0 {
		return CreateImageReqMultiError(errors)
	}

	return nil
}

// CreateImageReqMultiError is an error wrapping multiple validation errors
// returned by CreateImageReq.ValidateAll() if the designated constraints
// aren't met.
type CreateImageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateImageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateImageReqMultiError) AllErrors() []error { return m }

// CreateImageReqValidationError is the validation error returned by
// CreateImageReq.Validate if the designated constraints aren't met.
type CreateImageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateImageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateImageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateImageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateImageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateImageReqValidationError) ErrorName() string { return "CreateImageReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateImageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateImageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateImageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateImageReqValidationError{}

// Validate checks the field values on CreateImageRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateImageRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateImageRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateImageRspMultiError,
// or nil if none found.
func (m *CreateImageRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateImageRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for B64Json

	if len(errors) > 0 {
		return CreateImageRspMultiError(errors)
	}

	return nil
}

// CreateImageRspMultiError is an error wrapping multiple validation errors
// returned by CreateImageRsp.ValidateAll() if the designated constraints
// aren't met.
type CreateImageRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateImageRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateImageRspMultiError) AllErrors() []error { return m }

// CreateImageRspValidationError is the validation error returned by
// CreateImageRsp.Validate if the designated constraints aren't met.
type CreateImageRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateImageRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateImageRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateImageRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateImageRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateImageRspValidationError) ErrorName() string { return "CreateImageRspValidationError" }

// Error satisfies the builtin error interface
func (e CreateImageRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateImageRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateImageRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateImageRspValidationError{}
