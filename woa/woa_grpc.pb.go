// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.5.0
// source: woa.proto

package woa

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BaseMsgSvrClient is the client API for BaseMsgSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseMsgSvrClient interface {
	// CheckSignature 签名校验接口
	CheckSignature(ctx context.Context, in *CheckSignatureReq, opts ...grpc.CallOption) (*CheckSignatureRsp, error)
	// Message 微信公众号消息回调接口（所有微信公众号消息使用这个接口）
	Message(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (*MessageRsp, error)
}

type baseMsgSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseMsgSvrClient(cc grpc.ClientConnInterface) BaseMsgSvrClient {
	return &baseMsgSvrClient{cc}
}

func (c *baseMsgSvrClient) CheckSignature(ctx context.Context, in *CheckSignatureReq, opts ...grpc.CallOption) (*CheckSignatureRsp, error) {
	out := new(CheckSignatureRsp)
	err := c.cc.Invoke(ctx, "/woa.BaseMsgSvr/CheckSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseMsgSvrClient) Message(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (*MessageRsp, error) {
	out := new(MessageRsp)
	err := c.cc.Invoke(ctx, "/woa.BaseMsgSvr/Message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseMsgSvrServer is the server API for BaseMsgSvr service.
// All implementations must embed UnimplementedBaseMsgSvrServer
// for forward compatibility
type BaseMsgSvrServer interface {
	// CheckSignature 签名校验接口
	CheckSignature(context.Context, *CheckSignatureReq) (*CheckSignatureRsp, error)
	// Message 微信公众号消息回调接口（所有微信公众号消息使用这个接口）
	Message(context.Context, *MessageReq) (*MessageRsp, error)
	mustEmbedUnimplementedBaseMsgSvrServer()
}

// UnimplementedBaseMsgSvrServer must be embedded to have forward compatible implementations.
type UnimplementedBaseMsgSvrServer struct {
}

func (UnimplementedBaseMsgSvrServer) CheckSignature(context.Context, *CheckSignatureReq) (*CheckSignatureRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSignature not implemented")
}
func (UnimplementedBaseMsgSvrServer) Message(context.Context, *MessageReq) (*MessageRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Message not implemented")
}
func (UnimplementedBaseMsgSvrServer) mustEmbedUnimplementedBaseMsgSvrServer() {}

// UnsafeBaseMsgSvrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseMsgSvrServer will
// result in compilation errors.
type UnsafeBaseMsgSvrServer interface {
	mustEmbedUnimplementedBaseMsgSvrServer()
}

func RegisterBaseMsgSvrServer(s grpc.ServiceRegistrar, srv BaseMsgSvrServer) {
	s.RegisterService(&BaseMsgSvr_ServiceDesc, srv)
}

func _BaseMsgSvr_CheckSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSignatureReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseMsgSvrServer).CheckSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/woa.BaseMsgSvr/CheckSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseMsgSvrServer).CheckSignature(ctx, req.(*CheckSignatureReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseMsgSvr_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseMsgSvrServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/woa.BaseMsgSvr/Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseMsgSvrServer).Message(ctx, req.(*MessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BaseMsgSvr_ServiceDesc is the grpc.ServiceDesc for BaseMsgSvr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaseMsgSvr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "woa.BaseMsgSvr",
	HandlerType: (*BaseMsgSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckSignature",
			Handler:    _BaseMsgSvr_CheckSignature_Handler,
		},
		{
			MethodName: "Message",
			Handler:    _BaseMsgSvr_Message_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "woa.proto",
}
