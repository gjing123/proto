// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: wxpay.proto

package wxpay

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TransactionsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransactionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionsReqMultiError, or nil if none found.
func (m *TransactionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserOpenId

	// no validation rules for VipType

	if len(errors) > 0 {
		return TransactionsReqMultiError(errors)
	}

	return nil
}

// TransactionsReqMultiError is an error wrapping multiple validation errors
// returned by TransactionsReq.ValidateAll() if the designated constraints
// aren't met.
type TransactionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionsReqMultiError) AllErrors() []error { return m }

// TransactionsReqValidationError is the validation error returned by
// TransactionsReq.Validate if the designated constraints aren't met.
type TransactionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionsReqValidationError) ErrorName() string { return "TransactionsReqValidationError" }

// Error satisfies the builtin error interface
func (e TransactionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionsReqValidationError{}

// Validate checks the field values on TransactionsRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransactionsRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionsRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionsRspMultiError, or nil if none found.
func (m *TransactionsRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionsRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Appid

	// no validation rules for PrepayId

	// no validation rules for Timestamp

	// no validation rules for Nonce

	// no validation rules for Package

	// no validation rules for SignType

	// no validation rules for PaySign

	if len(errors) > 0 {
		return TransactionsRspMultiError(errors)
	}

	return nil
}

// TransactionsRspMultiError is an error wrapping multiple validation errors
// returned by TransactionsRsp.ValidateAll() if the designated constraints
// aren't met.
type TransactionsRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionsRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionsRspMultiError) AllErrors() []error { return m }

// TransactionsRspValidationError is the validation error returned by
// TransactionsRsp.Validate if the designated constraints aren't met.
type TransactionsRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionsRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionsRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionsRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionsRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionsRspValidationError) ErrorName() string { return "TransactionsRspValidationError" }

// Error satisfies the builtin error interface
func (e TransactionsRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionsRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionsRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionsRspValidationError{}

// Validate checks the field values on PayCallbackReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayCallbackReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayCallbackReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayCallbackReqMultiError,
// or nil if none found.
func (m *PayCallbackReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PayCallbackReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreateTime

	// no validation rules for ResourceType

	// no validation rules for EventType

	// no validation rules for Summary

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PayCallbackReqValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PayCallbackReqValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PayCallbackReqValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PayCallbackReqMultiError(errors)
	}

	return nil
}

// PayCallbackReqMultiError is an error wrapping multiple validation errors
// returned by PayCallbackReq.ValidateAll() if the designated constraints
// aren't met.
type PayCallbackReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayCallbackReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayCallbackReqMultiError) AllErrors() []error { return m }

// PayCallbackReqValidationError is the validation error returned by
// PayCallbackReq.Validate if the designated constraints aren't met.
type PayCallbackReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayCallbackReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayCallbackReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayCallbackReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayCallbackReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayCallbackReqValidationError) ErrorName() string { return "PayCallbackReqValidationError" }

// Error satisfies the builtin error interface
func (e PayCallbackReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayCallbackReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayCallbackReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayCallbackReqValidationError{}

// Validate checks the field values on PayCallbackRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayCallbackRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayCallbackRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayCallbackRspMultiError,
// or nil if none found.
func (m *PayCallbackRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *PayCallbackRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return PayCallbackRspMultiError(errors)
	}

	return nil
}

// PayCallbackRspMultiError is an error wrapping multiple validation errors
// returned by PayCallbackRsp.ValidateAll() if the designated constraints
// aren't met.
type PayCallbackRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayCallbackRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayCallbackRspMultiError) AllErrors() []error { return m }

// PayCallbackRspValidationError is the validation error returned by
// PayCallbackRsp.Validate if the designated constraints aren't met.
type PayCallbackRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayCallbackRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayCallbackRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayCallbackRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayCallbackRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayCallbackRspValidationError) ErrorName() string { return "PayCallbackRspValidationError" }

// Error satisfies the builtin error interface
func (e PayCallbackRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayCallbackRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayCallbackRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayCallbackRspValidationError{}

// Validate checks the field values on GetUserOpenidReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserOpenidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserOpenidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserOpenidReqMultiError, or nil if none found.
func (m *GetUserOpenidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserOpenidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return GetUserOpenidReqMultiError(errors)
	}

	return nil
}

// GetUserOpenidReqMultiError is an error wrapping multiple validation errors
// returned by GetUserOpenidReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserOpenidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserOpenidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserOpenidReqMultiError) AllErrors() []error { return m }

// GetUserOpenidReqValidationError is the validation error returned by
// GetUserOpenidReq.Validate if the designated constraints aren't met.
type GetUserOpenidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserOpenidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserOpenidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserOpenidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserOpenidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserOpenidReqValidationError) ErrorName() string { return "GetUserOpenidReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserOpenidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserOpenidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserOpenidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserOpenidReqValidationError{}

// Validate checks the field values on GetUserOpenidRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserOpenidRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserOpenidRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserOpenidRspMultiError, or nil if none found.
func (m *GetUserOpenidRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserOpenidRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Openid

	if len(errors) > 0 {
		return GetUserOpenidRspMultiError(errors)
	}

	return nil
}

// GetUserOpenidRspMultiError is an error wrapping multiple validation errors
// returned by GetUserOpenidRsp.ValidateAll() if the designated constraints
// aren't met.
type GetUserOpenidRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserOpenidRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserOpenidRspMultiError) AllErrors() []error { return m }

// GetUserOpenidRspValidationError is the validation error returned by
// GetUserOpenidRsp.Validate if the designated constraints aren't met.
type GetUserOpenidRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserOpenidRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserOpenidRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserOpenidRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserOpenidRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserOpenidRspValidationError) ErrorName() string { return "GetUserOpenidRspValidationError" }

// Error satisfies the builtin error interface
func (e GetUserOpenidRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserOpenidRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserOpenidRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserOpenidRspValidationError{}

// Validate checks the field values on GetAccessTokenRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccessTokenRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessTokenRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessTokenRspMultiError, or nil if none found.
func (m *GetAccessTokenRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessTokenRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for ExpiresIn

	// no validation rules for RefreshToken

	// no validation rules for Openid

	// no validation rules for Scope

	// no validation rules for Unionid

	if len(errors) > 0 {
		return GetAccessTokenRspMultiError(errors)
	}

	return nil
}

// GetAccessTokenRspMultiError is an error wrapping multiple validation errors
// returned by GetAccessTokenRsp.ValidateAll() if the designated constraints
// aren't met.
type GetAccessTokenRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessTokenRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessTokenRspMultiError) AllErrors() []error { return m }

// GetAccessTokenRspValidationError is the validation error returned by
// GetAccessTokenRsp.Validate if the designated constraints aren't met.
type GetAccessTokenRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessTokenRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessTokenRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessTokenRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessTokenRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessTokenRspValidationError) ErrorName() string {
	return "GetAccessTokenRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessTokenRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessTokenRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessTokenRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessTokenRspValidationError{}

// Validate checks the field values on WxTransactionsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WxTransactionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WxTransactionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WxTransactionsReqMultiError, or nil if none found.
func (m *WxTransactionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *WxTransactionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mchid

	// no validation rules for OutTradeNo

	// no validation rules for Appid

	// no validation rules for Description

	// no validation rules for NotifyUrl

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WxTransactionsReqValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WxTransactionsReqValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WxTransactionsReqValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPayer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WxTransactionsReqValidationError{
					field:  "Payer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WxTransactionsReqValidationError{
					field:  "Payer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WxTransactionsReqValidationError{
				field:  "Payer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WxTransactionsReqMultiError(errors)
	}

	return nil
}

// WxTransactionsReqMultiError is an error wrapping multiple validation errors
// returned by WxTransactionsReq.ValidateAll() if the designated constraints
// aren't met.
type WxTransactionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WxTransactionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WxTransactionsReqMultiError) AllErrors() []error { return m }

// WxTransactionsReqValidationError is the validation error returned by
// WxTransactionsReq.Validate if the designated constraints aren't met.
type WxTransactionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WxTransactionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WxTransactionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WxTransactionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WxTransactionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WxTransactionsReqValidationError) ErrorName() string {
	return "WxTransactionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e WxTransactionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWxTransactionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WxTransactionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WxTransactionsReqValidationError{}

// Validate checks the field values on WxTransactionsRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WxTransactionsRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WxTransactionsRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WxTransactionsRspMultiError, or nil if none found.
func (m *WxTransactionsRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *WxTransactionsRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrepayId

	if len(errors) > 0 {
		return WxTransactionsRspMultiError(errors)
	}

	return nil
}

// WxTransactionsRspMultiError is an error wrapping multiple validation errors
// returned by WxTransactionsRsp.ValidateAll() if the designated constraints
// aren't met.
type WxTransactionsRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WxTransactionsRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WxTransactionsRspMultiError) AllErrors() []error { return m }

// WxTransactionsRspValidationError is the validation error returned by
// WxTransactionsRsp.Validate if the designated constraints aren't met.
type WxTransactionsRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WxTransactionsRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WxTransactionsRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WxTransactionsRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WxTransactionsRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WxTransactionsRspValidationError) ErrorName() string {
	return "WxTransactionsRspValidationError"
}

// Error satisfies the builtin error interface
func (e WxTransactionsRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWxTransactionsRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WxTransactionsRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WxTransactionsRspValidationError{}

// Validate checks the field values on PayCallbackReq_Resource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PayCallbackReq_Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayCallbackReq_Resource with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PayCallbackReq_ResourceMultiError, or nil if none found.
func (m *PayCallbackReq_Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *PayCallbackReq_Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OriginalType

	// no validation rules for Algorithm

	// no validation rules for Ciphertext

	// no validation rules for AssociatedData

	// no validation rules for Nonce

	if len(errors) > 0 {
		return PayCallbackReq_ResourceMultiError(errors)
	}

	return nil
}

// PayCallbackReq_ResourceMultiError is an error wrapping multiple validation
// errors returned by PayCallbackReq_Resource.ValidateAll() if the designated
// constraints aren't met.
type PayCallbackReq_ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayCallbackReq_ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayCallbackReq_ResourceMultiError) AllErrors() []error { return m }

// PayCallbackReq_ResourceValidationError is the validation error returned by
// PayCallbackReq_Resource.Validate if the designated constraints aren't met.
type PayCallbackReq_ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayCallbackReq_ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayCallbackReq_ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayCallbackReq_ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayCallbackReq_ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayCallbackReq_ResourceValidationError) ErrorName() string {
	return "PayCallbackReq_ResourceValidationError"
}

// Error satisfies the builtin error interface
func (e PayCallbackReq_ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayCallbackReq_Resource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayCallbackReq_ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayCallbackReq_ResourceValidationError{}

// Validate checks the field values on WxTransactionsReq_Amount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WxTransactionsReq_Amount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WxTransactionsReq_Amount with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WxTransactionsReq_AmountMultiError, or nil if none found.
func (m *WxTransactionsReq_Amount) ValidateAll() error {
	return m.validate(true)
}

func (m *WxTransactionsReq_Amount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Currency

	if len(errors) > 0 {
		return WxTransactionsReq_AmountMultiError(errors)
	}

	return nil
}

// WxTransactionsReq_AmountMultiError is an error wrapping multiple validation
// errors returned by WxTransactionsReq_Amount.ValidateAll() if the designated
// constraints aren't met.
type WxTransactionsReq_AmountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WxTransactionsReq_AmountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WxTransactionsReq_AmountMultiError) AllErrors() []error { return m }

// WxTransactionsReq_AmountValidationError is the validation error returned by
// WxTransactionsReq_Amount.Validate if the designated constraints aren't met.
type WxTransactionsReq_AmountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WxTransactionsReq_AmountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WxTransactionsReq_AmountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WxTransactionsReq_AmountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WxTransactionsReq_AmountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WxTransactionsReq_AmountValidationError) ErrorName() string {
	return "WxTransactionsReq_AmountValidationError"
}

// Error satisfies the builtin error interface
func (e WxTransactionsReq_AmountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWxTransactionsReq_Amount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WxTransactionsReq_AmountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WxTransactionsReq_AmountValidationError{}

// Validate checks the field values on WxTransactionsReq_Payer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WxTransactionsReq_Payer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WxTransactionsReq_Payer with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WxTransactionsReq_PayerMultiError, or nil if none found.
func (m *WxTransactionsReq_Payer) ValidateAll() error {
	return m.validate(true)
}

func (m *WxTransactionsReq_Payer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Openid

	if len(errors) > 0 {
		return WxTransactionsReq_PayerMultiError(errors)
	}

	return nil
}

// WxTransactionsReq_PayerMultiError is an error wrapping multiple validation
// errors returned by WxTransactionsReq_Payer.ValidateAll() if the designated
// constraints aren't met.
type WxTransactionsReq_PayerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WxTransactionsReq_PayerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WxTransactionsReq_PayerMultiError) AllErrors() []error { return m }

// WxTransactionsReq_PayerValidationError is the validation error returned by
// WxTransactionsReq_Payer.Validate if the designated constraints aren't met.
type WxTransactionsReq_PayerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WxTransactionsReq_PayerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WxTransactionsReq_PayerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WxTransactionsReq_PayerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WxTransactionsReq_PayerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WxTransactionsReq_PayerValidationError) ErrorName() string {
	return "WxTransactionsReq_PayerValidationError"
}

// Error satisfies the builtin error interface
func (e WxTransactionsReq_PayerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWxTransactionsReq_Payer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WxTransactionsReq_PayerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WxTransactionsReq_PayerValidationError{}
