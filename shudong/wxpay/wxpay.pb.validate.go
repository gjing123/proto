// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: wxpay.proto

package wxpay

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TransactionsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransactionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionsReqMultiError, or nil if none found.
func (m *TransactionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserOpenid()) < 1 {
		err := TransactionsReqValidationError{
			field:  "UserOpenid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _TransactionsReq_VipPackage_InLookup[m.GetVipPackage()]; !ok {
		err := TransactionsReqValidationError{
			field:  "VipPackage",
			reason: "value must be in list [PackageOne PackageTwo PackageThree PackageFour]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TransactionsReqMultiError(errors)
	}

	return nil
}

// TransactionsReqMultiError is an error wrapping multiple validation errors
// returned by TransactionsReq.ValidateAll() if the designated constraints
// aren't met.
type TransactionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionsReqMultiError) AllErrors() []error { return m }

// TransactionsReqValidationError is the validation error returned by
// TransactionsReq.Validate if the designated constraints aren't met.
type TransactionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionsReqValidationError) ErrorName() string { return "TransactionsReqValidationError" }

// Error satisfies the builtin error interface
func (e TransactionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionsReqValidationError{}

var _TransactionsReq_VipPackage_InLookup = map[TransactionsReq_PackageType]struct{}{
	1: {},
	2: {},
	3: {},
	4: {},
}

// Validate checks the field values on TransactionsRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransactionsRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionsRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionsRspMultiError, or nil if none found.
func (m *TransactionsRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionsRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Appid

	// no validation rules for Timestamp

	// no validation rules for Nonce

	// no validation rules for Package

	// no validation rules for SignType

	// no validation rules for PaySign

	if len(errors) > 0 {
		return TransactionsRspMultiError(errors)
	}

	return nil
}

// TransactionsRspMultiError is an error wrapping multiple validation errors
// returned by TransactionsRsp.ValidateAll() if the designated constraints
// aren't met.
type TransactionsRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionsRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionsRspMultiError) AllErrors() []error { return m }

// TransactionsRspValidationError is the validation error returned by
// TransactionsRsp.Validate if the designated constraints aren't met.
type TransactionsRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionsRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionsRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionsRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionsRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionsRspValidationError) ErrorName() string { return "TransactionsRspValidationError" }

// Error satisfies the builtin error interface
func (e TransactionsRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionsRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionsRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionsRspValidationError{}

// Validate checks the field values on PayCallbackReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayCallbackReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayCallbackReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayCallbackReqMultiError,
// or nil if none found.
func (m *PayCallbackReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PayCallbackReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PayCallbackReqMultiError(errors)
	}

	return nil
}

// PayCallbackReqMultiError is an error wrapping multiple validation errors
// returned by PayCallbackReq.ValidateAll() if the designated constraints
// aren't met.
type PayCallbackReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayCallbackReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayCallbackReqMultiError) AllErrors() []error { return m }

// PayCallbackReqValidationError is the validation error returned by
// PayCallbackReq.Validate if the designated constraints aren't met.
type PayCallbackReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayCallbackReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayCallbackReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayCallbackReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayCallbackReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayCallbackReqValidationError) ErrorName() string { return "PayCallbackReqValidationError" }

// Error satisfies the builtin error interface
func (e PayCallbackReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayCallbackReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayCallbackReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayCallbackReqValidationError{}

// Validate checks the field values on PayCallbackRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayCallbackRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayCallbackRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayCallbackRspMultiError,
// or nil if none found.
func (m *PayCallbackRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *PayCallbackRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return PayCallbackRspMultiError(errors)
	}

	return nil
}

// PayCallbackRspMultiError is an error wrapping multiple validation errors
// returned by PayCallbackRsp.ValidateAll() if the designated constraints
// aren't met.
type PayCallbackRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayCallbackRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayCallbackRspMultiError) AllErrors() []error { return m }

// PayCallbackRspValidationError is the validation error returned by
// PayCallbackRsp.Validate if the designated constraints aren't met.
type PayCallbackRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayCallbackRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayCallbackRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayCallbackRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayCallbackRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayCallbackRspValidationError) ErrorName() string { return "PayCallbackRspValidationError" }

// Error satisfies the builtin error interface
func (e PayCallbackRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayCallbackRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayCallbackRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayCallbackRspValidationError{}

// Validate checks the field values on GetUserOpenidReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserOpenidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserOpenidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserOpenidReqMultiError, or nil if none found.
func (m *GetUserOpenidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserOpenidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := GetUserOpenidReqValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserOpenidReqMultiError(errors)
	}

	return nil
}

// GetUserOpenidReqMultiError is an error wrapping multiple validation errors
// returned by GetUserOpenidReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserOpenidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserOpenidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserOpenidReqMultiError) AllErrors() []error { return m }

// GetUserOpenidReqValidationError is the validation error returned by
// GetUserOpenidReq.Validate if the designated constraints aren't met.
type GetUserOpenidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserOpenidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserOpenidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserOpenidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserOpenidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserOpenidReqValidationError) ErrorName() string { return "GetUserOpenidReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserOpenidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserOpenidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserOpenidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserOpenidReqValidationError{}

// Validate checks the field values on GetUserOpenidRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserOpenidRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserOpenidRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserOpenidRspMultiError, or nil if none found.
func (m *GetUserOpenidRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserOpenidRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Openid

	if len(errors) > 0 {
		return GetUserOpenidRspMultiError(errors)
	}

	return nil
}

// GetUserOpenidRspMultiError is an error wrapping multiple validation errors
// returned by GetUserOpenidRsp.ValidateAll() if the designated constraints
// aren't met.
type GetUserOpenidRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserOpenidRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserOpenidRspMultiError) AllErrors() []error { return m }

// GetUserOpenidRspValidationError is the validation error returned by
// GetUserOpenidRsp.Validate if the designated constraints aren't met.
type GetUserOpenidRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserOpenidRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserOpenidRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserOpenidRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserOpenidRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserOpenidRspValidationError) ErrorName() string { return "GetUserOpenidRspValidationError" }

// Error satisfies the builtin error interface
func (e GetUserOpenidRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserOpenidRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserOpenidRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserOpenidRspValidationError{}

// Validate checks the field values on GetUserAmountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserAmountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAmountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserAmountReqMultiError, or nil if none found.
func (m *GetUserAmountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAmountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserOpenid()) < 1 {
		err := GetUserAmountReqValidationError{
			field:  "UserOpenid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserAmountReqMultiError(errors)
	}

	return nil
}

// GetUserAmountReqMultiError is an error wrapping multiple validation errors
// returned by GetUserAmountReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserAmountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAmountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAmountReqMultiError) AllErrors() []error { return m }

// GetUserAmountReqValidationError is the validation error returned by
// GetUserAmountReq.Validate if the designated constraints aren't met.
type GetUserAmountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAmountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAmountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAmountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAmountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAmountReqValidationError) ErrorName() string { return "GetUserAmountReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserAmountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAmountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAmountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAmountReqValidationError{}

// Validate checks the field values on GetUserAmountRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserAmountRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAmountRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserAmountRspMultiError, or nil if none found.
func (m *GetUserAmountRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAmountRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	if len(errors) > 0 {
		return GetUserAmountRspMultiError(errors)
	}

	return nil
}

// GetUserAmountRspMultiError is an error wrapping multiple validation errors
// returned by GetUserAmountRsp.ValidateAll() if the designated constraints
// aren't met.
type GetUserAmountRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAmountRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAmountRspMultiError) AllErrors() []error { return m }

// GetUserAmountRspValidationError is the validation error returned by
// GetUserAmountRsp.Validate if the designated constraints aren't met.
type GetUserAmountRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAmountRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAmountRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAmountRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAmountRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAmountRspValidationError) ErrorName() string { return "GetUserAmountRspValidationError" }

// Error satisfies the builtin error interface
func (e GetUserAmountRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAmountRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAmountRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAmountRspValidationError{}

// Validate checks the field values on GetAccessTokenRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccessTokenRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessTokenRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessTokenRspMultiError, or nil if none found.
func (m *GetAccessTokenRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessTokenRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for ExpiresIn

	// no validation rules for RefreshToken

	// no validation rules for Openid

	// no validation rules for Scope

	// no validation rules for Unionid

	if len(errors) > 0 {
		return GetAccessTokenRspMultiError(errors)
	}

	return nil
}

// GetAccessTokenRspMultiError is an error wrapping multiple validation errors
// returned by GetAccessTokenRsp.ValidateAll() if the designated constraints
// aren't met.
type GetAccessTokenRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessTokenRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessTokenRspMultiError) AllErrors() []error { return m }

// GetAccessTokenRspValidationError is the validation error returned by
// GetAccessTokenRsp.Validate if the designated constraints aren't met.
type GetAccessTokenRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessTokenRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessTokenRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessTokenRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessTokenRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessTokenRspValidationError) ErrorName() string {
	return "GetAccessTokenRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessTokenRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessTokenRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessTokenRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessTokenRspValidationError{}
