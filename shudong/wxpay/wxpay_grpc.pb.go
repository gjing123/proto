// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.5.0
// source: wxpay.proto

package wxpay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WexinPaySvrClient is the client API for WexinPaySvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WexinPaySvrClient interface {
	// Transactions 交易接口
	Transactions(ctx context.Context, in *TransactionsReq, opts ...grpc.CallOption) (*TransactionsRsp, error)
	// PayCallback 交易结果回调
	PayCallback(ctx context.Context, in *PayCallbackReq, opts ...grpc.CallOption) (*PayCallbackRsp, error)
	// GetUserOpenid 获取用户openid接口
	GetUserOpenid(ctx context.Context, in *GetUserOpenidReq, opts ...grpc.CallOption) (*GetUserOpenidRsp, error)
	// GetUserAmount 获取用户积分
	GetUserAmount(ctx context.Context, in *GetUserAmountReq, opts ...grpc.CallOption) (*GetUserAmountRsp, error)
}

type wexinPaySvrClient struct {
	cc grpc.ClientConnInterface
}

func NewWexinPaySvrClient(cc grpc.ClientConnInterface) WexinPaySvrClient {
	return &wexinPaySvrClient{cc}
}

func (c *wexinPaySvrClient) Transactions(ctx context.Context, in *TransactionsReq, opts ...grpc.CallOption) (*TransactionsRsp, error) {
	out := new(TransactionsRsp)
	err := c.cc.Invoke(ctx, "/wxpay.WexinPaySvr/Transactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wexinPaySvrClient) PayCallback(ctx context.Context, in *PayCallbackReq, opts ...grpc.CallOption) (*PayCallbackRsp, error) {
	out := new(PayCallbackRsp)
	err := c.cc.Invoke(ctx, "/wxpay.WexinPaySvr/PayCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wexinPaySvrClient) GetUserOpenid(ctx context.Context, in *GetUserOpenidReq, opts ...grpc.CallOption) (*GetUserOpenidRsp, error) {
	out := new(GetUserOpenidRsp)
	err := c.cc.Invoke(ctx, "/wxpay.WexinPaySvr/GetUserOpenid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wexinPaySvrClient) GetUserAmount(ctx context.Context, in *GetUserAmountReq, opts ...grpc.CallOption) (*GetUserAmountRsp, error) {
	out := new(GetUserAmountRsp)
	err := c.cc.Invoke(ctx, "/wxpay.WexinPaySvr/GetUserAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WexinPaySvrServer is the server API for WexinPaySvr service.
// All implementations must embed UnimplementedWexinPaySvrServer
// for forward compatibility
type WexinPaySvrServer interface {
	// Transactions 交易接口
	Transactions(context.Context, *TransactionsReq) (*TransactionsRsp, error)
	// PayCallback 交易结果回调
	PayCallback(context.Context, *PayCallbackReq) (*PayCallbackRsp, error)
	// GetUserOpenid 获取用户openid接口
	GetUserOpenid(context.Context, *GetUserOpenidReq) (*GetUserOpenidRsp, error)
	// GetUserAmount 获取用户积分
	GetUserAmount(context.Context, *GetUserAmountReq) (*GetUserAmountRsp, error)
	mustEmbedUnimplementedWexinPaySvrServer()
}

// UnimplementedWexinPaySvrServer must be embedded to have forward compatible implementations.
type UnimplementedWexinPaySvrServer struct {
}

func (UnimplementedWexinPaySvrServer) Transactions(context.Context, *TransactionsReq) (*TransactionsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transactions not implemented")
}
func (UnimplementedWexinPaySvrServer) PayCallback(context.Context, *PayCallbackReq) (*PayCallbackRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayCallback not implemented")
}
func (UnimplementedWexinPaySvrServer) GetUserOpenid(context.Context, *GetUserOpenidReq) (*GetUserOpenidRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOpenid not implemented")
}
func (UnimplementedWexinPaySvrServer) GetUserAmount(context.Context, *GetUserAmountReq) (*GetUserAmountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAmount not implemented")
}
func (UnimplementedWexinPaySvrServer) mustEmbedUnimplementedWexinPaySvrServer() {}

// UnsafeWexinPaySvrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WexinPaySvrServer will
// result in compilation errors.
type UnsafeWexinPaySvrServer interface {
	mustEmbedUnimplementedWexinPaySvrServer()
}

func RegisterWexinPaySvrServer(s grpc.ServiceRegistrar, srv WexinPaySvrServer) {
	s.RegisterService(&WexinPaySvr_ServiceDesc, srv)
}

func _WexinPaySvr_Transactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WexinPaySvrServer).Transactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wxpay.WexinPaySvr/Transactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WexinPaySvrServer).Transactions(ctx, req.(*TransactionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WexinPaySvr_PayCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WexinPaySvrServer).PayCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wxpay.WexinPaySvr/PayCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WexinPaySvrServer).PayCallback(ctx, req.(*PayCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WexinPaySvr_GetUserOpenid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOpenidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WexinPaySvrServer).GetUserOpenid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wxpay.WexinPaySvr/GetUserOpenid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WexinPaySvrServer).GetUserOpenid(ctx, req.(*GetUserOpenidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WexinPaySvr_GetUserAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAmountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WexinPaySvrServer).GetUserAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wxpay.WexinPaySvr/GetUserAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WexinPaySvrServer).GetUserAmount(ctx, req.(*GetUserAmountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WexinPaySvr_ServiceDesc is the grpc.ServiceDesc for WexinPaySvr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WexinPaySvr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wxpay.WexinPaySvr",
	HandlerType: (*WexinPaySvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transactions",
			Handler:    _WexinPaySvr_Transactions_Handler,
		},
		{
			MethodName: "PayCallback",
			Handler:    _WexinPaySvr_PayCallback_Handler,
		},
		{
			MethodName: "GetUserOpenid",
			Handler:    _WexinPaySvr_GetUserOpenid_Handler,
		},
		{
			MethodName: "GetUserAmount",
			Handler:    _WexinPaySvr_GetUserAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wxpay.proto",
}
