// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: woa.proto

package woa

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CheckSignatureReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckSignatureReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckSignatureReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckSignatureReqMultiError, or nil if none found.
func (m *CheckSignatureReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckSignatureReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Signature

	// no validation rules for Timestamp

	// no validation rules for Nonce

	// no validation rules for Echostr

	if len(errors) > 0 {
		return CheckSignatureReqMultiError(errors)
	}

	return nil
}

// CheckSignatureReqMultiError is an error wrapping multiple validation errors
// returned by CheckSignatureReq.ValidateAll() if the designated constraints
// aren't met.
type CheckSignatureReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckSignatureReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckSignatureReqMultiError) AllErrors() []error { return m }

// CheckSignatureReqValidationError is the validation error returned by
// CheckSignatureReq.Validate if the designated constraints aren't met.
type CheckSignatureReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckSignatureReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckSignatureReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckSignatureReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckSignatureReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckSignatureReqValidationError) ErrorName() string {
	return "CheckSignatureReqValidationError"
}

// Error satisfies the builtin error interface
func (e CheckSignatureReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckSignatureReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckSignatureReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckSignatureReqValidationError{}

// Validate checks the field values on CheckSignatureRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckSignatureRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckSignatureRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckSignatureRspMultiError, or nil if none found.
func (m *CheckSignatureRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckSignatureRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Echostr

	if len(errors) > 0 {
		return CheckSignatureRspMultiError(errors)
	}

	return nil
}

// CheckSignatureRspMultiError is an error wrapping multiple validation errors
// returned by CheckSignatureRsp.ValidateAll() if the designated constraints
// aren't met.
type CheckSignatureRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckSignatureRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckSignatureRspMultiError) AllErrors() []error { return m }

// CheckSignatureRspValidationError is the validation error returned by
// CheckSignatureRsp.Validate if the designated constraints aren't met.
type CheckSignatureRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckSignatureRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckSignatureRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckSignatureRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckSignatureRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckSignatureRspValidationError) ErrorName() string {
	return "CheckSignatureRspValidationError"
}

// Error satisfies the builtin error interface
func (e CheckSignatureRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckSignatureRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckSignatureRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckSignatureRspValidationError{}

// Validate checks the field values on MessageReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessageReqMultiError, or
// nil if none found.
func (m *MessageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ToUserName

	// no validation rules for FromUserName

	// no validation rules for CreateTime

	// no validation rules for MsgType

	// no validation rules for Content

	// no validation rules for Recognition

	// no validation rules for MsgId

	// no validation rules for MsgDataId

	// no validation rules for Idx

	// no validation rules for Event

	// no validation rules for EventKey

	// no validation rules for Ticket

	if len(errors) > 0 {
		return MessageReqMultiError(errors)
	}

	return nil
}

// MessageReqMultiError is an error wrapping multiple validation errors
// returned by MessageReq.ValidateAll() if the designated constraints aren't met.
type MessageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageReqMultiError) AllErrors() []error { return m }

// MessageReqValidationError is the validation error returned by
// MessageReq.Validate if the designated constraints aren't met.
type MessageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageReqValidationError) ErrorName() string { return "MessageReqValidationError" }

// Error satisfies the builtin error interface
func (e MessageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageReqValidationError{}

// Validate checks the field values on MessageRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessageRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessageRspMultiError, or
// nil if none found.
func (m *MessageRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XMLName

	if all {
		switch v := interface{}(m.GetToUserName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageRspValidationError{
					field:  "ToUserName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageRspValidationError{
					field:  "ToUserName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToUserName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageRspValidationError{
				field:  "ToUserName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFromUserName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageRspValidationError{
					field:  "FromUserName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageRspValidationError{
					field:  "FromUserName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFromUserName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageRspValidationError{
				field:  "FromUserName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreateTime

	// no validation rules for MsgType

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageRspValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageRspValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageRspValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageRspValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageRspValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageRspValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MessageRspMultiError(errors)
	}

	return nil
}

// MessageRspMultiError is an error wrapping multiple validation errors
// returned by MessageRsp.ValidateAll() if the designated constraints aren't met.
type MessageRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageRspMultiError) AllErrors() []error { return m }

// MessageRspValidationError is the validation error returned by
// MessageRsp.Validate if the designated constraints aren't met.
type MessageRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageRspValidationError) ErrorName() string { return "MessageRspValidationError" }

// Error satisfies the builtin error interface
func (e MessageRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageRspValidationError{}

// Validate checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Video) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VideoMultiError, or nil if none found.
func (m *Video) ValidateAll() error {
	return m.validate(true)
}

func (m *Video) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMediaId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoValidationError{
					field:  "MediaId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoValidationError{
					field:  "MediaId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMediaId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoValidationError{
				field:  "MediaId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTitle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoValidationError{
					field:  "Title",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoValidationError{
					field:  "Title",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTitle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoValidationError{
				field:  "Title",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VideoMultiError(errors)
	}

	return nil
}

// VideoMultiError is an error wrapping multiple validation errors returned by
// Video.ValidateAll() if the designated constraints aren't met.
type VideoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoMultiError) AllErrors() []error { return m }

// VideoValidationError is the validation error returned by Video.Validate if
// the designated constraints aren't met.
type VideoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoValidationError) ErrorName() string { return "VideoValidationError" }

// Error satisfies the builtin error interface
func (e VideoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoValidationError{}

// Validate checks the field values on ToUserName with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ToUserName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToUserName with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ToUserNameMultiError, or
// nil if none found.
func (m *ToUserName) ValidateAll() error {
	return m.validate(true)
}

func (m *ToUserName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ToUserName

	if len(errors) > 0 {
		return ToUserNameMultiError(errors)
	}

	return nil
}

// ToUserNameMultiError is an error wrapping multiple validation errors
// returned by ToUserName.ValidateAll() if the designated constraints aren't met.
type ToUserNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToUserNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToUserNameMultiError) AllErrors() []error { return m }

// ToUserNameValidationError is the validation error returned by
// ToUserName.Validate if the designated constraints aren't met.
type ToUserNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToUserNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToUserNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToUserNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToUserNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToUserNameValidationError) ErrorName() string { return "ToUserNameValidationError" }

// Error satisfies the builtin error interface
func (e ToUserNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToUserName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToUserNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToUserNameValidationError{}

// Validate checks the field values on FromUserName with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FromUserName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FromUserName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FromUserNameMultiError, or
// nil if none found.
func (m *FromUserName) ValidateAll() error {
	return m.validate(true)
}

func (m *FromUserName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromUserName

	if len(errors) > 0 {
		return FromUserNameMultiError(errors)
	}

	return nil
}

// FromUserNameMultiError is an error wrapping multiple validation errors
// returned by FromUserName.ValidateAll() if the designated constraints aren't met.
type FromUserNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FromUserNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FromUserNameMultiError) AllErrors() []error { return m }

// FromUserNameValidationError is the validation error returned by
// FromUserName.Validate if the designated constraints aren't met.
type FromUserNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FromUserNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FromUserNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FromUserNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FromUserNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FromUserNameValidationError) ErrorName() string { return "FromUserNameValidationError" }

// Error satisfies the builtin error interface
func (e FromUserNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFromUserName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FromUserNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FromUserNameValidationError{}

// Validate checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Content) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ContentMultiError, or nil if none found.
func (m *Content) ValidateAll() error {
	return m.validate(true)
}

func (m *Content) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if len(errors) > 0 {
		return ContentMultiError(errors)
	}

	return nil
}

// ContentMultiError is an error wrapping multiple validation errors returned
// by Content.ValidateAll() if the designated constraints aren't met.
type ContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContentMultiError) AllErrors() []error { return m }

// ContentValidationError is the validation error returned by Content.Validate
// if the designated constraints aren't met.
type ContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContentValidationError) ErrorName() string { return "ContentValidationError" }

// Error satisfies the builtin error interface
func (e ContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContentValidationError{}

// Validate checks the field values on MediaId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MediaId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MediaId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MediaIdMultiError, or nil if none found.
func (m *MediaId) ValidateAll() error {
	return m.validate(true)
}

func (m *MediaId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MediaId

	if len(errors) > 0 {
		return MediaIdMultiError(errors)
	}

	return nil
}

// MediaIdMultiError is an error wrapping multiple validation errors returned
// by MediaId.ValidateAll() if the designated constraints aren't met.
type MediaIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MediaIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MediaIdMultiError) AllErrors() []error { return m }

// MediaIdValidationError is the validation error returned by MediaId.Validate
// if the designated constraints aren't met.
type MediaIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MediaIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MediaIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MediaIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MediaIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MediaIdValidationError) ErrorName() string { return "MediaIdValidationError" }

// Error satisfies the builtin error interface
func (e MediaIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMediaId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MediaIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MediaIdValidationError{}

// Validate checks the field values on Title with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Title) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Title with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TitleMultiError, or nil if none found.
func (m *Title) ValidateAll() error {
	return m.validate(true)
}

func (m *Title) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	if len(errors) > 0 {
		return TitleMultiError(errors)
	}

	return nil
}

// TitleMultiError is an error wrapping multiple validation errors returned by
// Title.ValidateAll() if the designated constraints aren't met.
type TitleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TitleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TitleMultiError) AllErrors() []error { return m }

// TitleValidationError is the validation error returned by Title.Validate if
// the designated constraints aren't met.
type TitleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TitleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TitleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TitleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TitleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TitleValidationError) ErrorName() string { return "TitleValidationError" }

// Error satisfies the builtin error interface
func (e TitleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTitle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TitleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TitleValidationError{}

// Validate checks the field values on GetStableAccessTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStableAccessTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStableAccessTokenReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStableAccessTokenReqMultiError, or nil if none found.
func (m *GetStableAccessTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStableAccessTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GrantType

	// no validation rules for Appid

	// no validation rules for Secret

	// no validation rules for ForceRefresh

	if len(errors) > 0 {
		return GetStableAccessTokenReqMultiError(errors)
	}

	return nil
}

// GetStableAccessTokenReqMultiError is an error wrapping multiple validation
// errors returned by GetStableAccessTokenReq.ValidateAll() if the designated
// constraints aren't met.
type GetStableAccessTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStableAccessTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStableAccessTokenReqMultiError) AllErrors() []error { return m }

// GetStableAccessTokenReqValidationError is the validation error returned by
// GetStableAccessTokenReq.Validate if the designated constraints aren't met.
type GetStableAccessTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStableAccessTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStableAccessTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStableAccessTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStableAccessTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStableAccessTokenReqValidationError) ErrorName() string {
	return "GetStableAccessTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetStableAccessTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStableAccessTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStableAccessTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStableAccessTokenReqValidationError{}

// Validate checks the field values on GetStableAccessTokenRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStableAccessTokenRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStableAccessTokenRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStableAccessTokenRspMultiError, or nil if none found.
func (m *GetStableAccessTokenRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStableAccessTokenRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for ExpireIn

	// no validation rules for Errcode

	// no validation rules for Errmsg

	if len(errors) > 0 {
		return GetStableAccessTokenRspMultiError(errors)
	}

	return nil
}

// GetStableAccessTokenRspMultiError is an error wrapping multiple validation
// errors returned by GetStableAccessTokenRsp.ValidateAll() if the designated
// constraints aren't met.
type GetStableAccessTokenRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStableAccessTokenRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStableAccessTokenRspMultiError) AllErrors() []error { return m }

// GetStableAccessTokenRspValidationError is the validation error returned by
// GetStableAccessTokenRsp.Validate if the designated constraints aren't met.
type GetStableAccessTokenRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStableAccessTokenRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStableAccessTokenRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStableAccessTokenRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStableAccessTokenRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStableAccessTokenRspValidationError) ErrorName() string {
	return "GetStableAccessTokenRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetStableAccessTokenRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStableAccessTokenRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStableAccessTokenRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStableAccessTokenRspValidationError{}

// Validate checks the field values on SendKefuMsgReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendKefuMsgReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendKefuMsgReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendKefuMsgReqMultiError,
// or nil if none found.
func (m *SendKefuMsgReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendKefuMsgReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Touser

	// no validation rules for Msgtype

	if all {
		switch v := interface{}(m.GetText()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendKefuMsgReqValidationError{
					field:  "Text",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendKefuMsgReqValidationError{
					field:  "Text",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendKefuMsgReqValidationError{
				field:  "Text",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendKefuMsgReqValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendKefuMsgReqValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendKefuMsgReqValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendKefuMsgReqMultiError(errors)
	}

	return nil
}

// SendKefuMsgReqMultiError is an error wrapping multiple validation errors
// returned by SendKefuMsgReq.ValidateAll() if the designated constraints
// aren't met.
type SendKefuMsgReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendKefuMsgReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendKefuMsgReqMultiError) AllErrors() []error { return m }

// SendKefuMsgReqValidationError is the validation error returned by
// SendKefuMsgReq.Validate if the designated constraints aren't met.
type SendKefuMsgReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendKefuMsgReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendKefuMsgReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendKefuMsgReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendKefuMsgReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendKefuMsgReqValidationError) ErrorName() string { return "SendKefuMsgReqValidationError" }

// Error satisfies the builtin error interface
func (e SendKefuMsgReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendKefuMsgReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendKefuMsgReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendKefuMsgReqValidationError{}

// Validate checks the field values on KefuTextMsg with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KefuTextMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KefuTextMsg with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KefuTextMsgMultiError, or
// nil if none found.
func (m *KefuTextMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *KefuTextMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if len(errors) > 0 {
		return KefuTextMsgMultiError(errors)
	}

	return nil
}

// KefuTextMsgMultiError is an error wrapping multiple validation errors
// returned by KefuTextMsg.ValidateAll() if the designated constraints aren't met.
type KefuTextMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KefuTextMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KefuTextMsgMultiError) AllErrors() []error { return m }

// KefuTextMsgValidationError is the validation error returned by
// KefuTextMsg.Validate if the designated constraints aren't met.
type KefuTextMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KefuTextMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KefuTextMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KefuTextMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KefuTextMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KefuTextMsgValidationError) ErrorName() string { return "KefuTextMsgValidationError" }

// Error satisfies the builtin error interface
func (e KefuTextMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKefuTextMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KefuTextMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KefuTextMsgValidationError{}

// Validate checks the field values on KefuImageMsg with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KefuImageMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KefuImageMsg with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KefuImageMsgMultiError, or
// nil if none found.
func (m *KefuImageMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *KefuImageMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MediaId

	if len(errors) > 0 {
		return KefuImageMsgMultiError(errors)
	}

	return nil
}

// KefuImageMsgMultiError is an error wrapping multiple validation errors
// returned by KefuImageMsg.ValidateAll() if the designated constraints aren't met.
type KefuImageMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KefuImageMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KefuImageMsgMultiError) AllErrors() []error { return m }

// KefuImageMsgValidationError is the validation error returned by
// KefuImageMsg.Validate if the designated constraints aren't met.
type KefuImageMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KefuImageMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KefuImageMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KefuImageMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KefuImageMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KefuImageMsgValidationError) ErrorName() string { return "KefuImageMsgValidationError" }

// Error satisfies the builtin error interface
func (e KefuImageMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKefuImageMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KefuImageMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KefuImageMsgValidationError{}

// Validate checks the field values on SendKefuMsgRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendKefuMsgRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendKefuMsgRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendKefuMsgRspMultiError,
// or nil if none found.
func (m *SendKefuMsgRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *SendKefuMsgRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Errcode

	// no validation rules for Errmsg

	if len(errors) > 0 {
		return SendKefuMsgRspMultiError(errors)
	}

	return nil
}

// SendKefuMsgRspMultiError is an error wrapping multiple validation errors
// returned by SendKefuMsgRsp.ValidateAll() if the designated constraints
// aren't met.
type SendKefuMsgRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendKefuMsgRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendKefuMsgRspMultiError) AllErrors() []error { return m }

// SendKefuMsgRspValidationError is the validation error returned by
// SendKefuMsgRsp.Validate if the designated constraints aren't met.
type SendKefuMsgRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendKefuMsgRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendKefuMsgRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendKefuMsgRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendKefuMsgRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendKefuMsgRspValidationError) ErrorName() string { return "SendKefuMsgRspValidationError" }

// Error satisfies the builtin error interface
func (e SendKefuMsgRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendKefuMsgRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendKefuMsgRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendKefuMsgRspValidationError{}

// Validate checks the field values on UploadImageMsgRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UploadImageMsgRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadImageMsgRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadImageMsgRspMultiError, or nil if none found.
func (m *UploadImageMsgRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadImageMsgRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for MediaId

	// no validation rules for CreatedAt

	// no validation rules for Errcode

	// no validation rules for Errmsg

	if len(errors) > 0 {
		return UploadImageMsgRspMultiError(errors)
	}

	return nil
}

// UploadImageMsgRspMultiError is an error wrapping multiple validation errors
// returned by UploadImageMsgRsp.ValidateAll() if the designated constraints
// aren't met.
type UploadImageMsgRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadImageMsgRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadImageMsgRspMultiError) AllErrors() []error { return m }

// UploadImageMsgRspValidationError is the validation error returned by
// UploadImageMsgRsp.Validate if the designated constraints aren't met.
type UploadImageMsgRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadImageMsgRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadImageMsgRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadImageMsgRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadImageMsgRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadImageMsgRspValidationError) ErrorName() string {
	return "UploadImageMsgRspValidationError"
}

// Error satisfies the builtin error interface
func (e UploadImageMsgRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadImageMsgRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadImageMsgRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadImageMsgRspValidationError{}

// Validate checks the field values on SendTypeStatusReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendTypeStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTypeStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendTypeStatusReqMultiError, or nil if none found.
func (m *SendTypeStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTypeStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Touser

	// no validation rules for Command

	if len(errors) > 0 {
		return SendTypeStatusReqMultiError(errors)
	}

	return nil
}

// SendTypeStatusReqMultiError is an error wrapping multiple validation errors
// returned by SendTypeStatusReq.ValidateAll() if the designated constraints
// aren't met.
type SendTypeStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTypeStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTypeStatusReqMultiError) AllErrors() []error { return m }

// SendTypeStatusReqValidationError is the validation error returned by
// SendTypeStatusReq.Validate if the designated constraints aren't met.
type SendTypeStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTypeStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTypeStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTypeStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTypeStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTypeStatusReqValidationError) ErrorName() string {
	return "SendTypeStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendTypeStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTypeStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTypeStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTypeStatusReqValidationError{}

// Validate checks the field values on SendTypeStatusRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendTypeStatusRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTypeStatusRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendTypeStatusRspMultiError, or nil if none found.
func (m *SendTypeStatusRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTypeStatusRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Errcode

	// no validation rules for Errmsg

	if len(errors) > 0 {
		return SendTypeStatusRspMultiError(errors)
	}

	return nil
}

// SendTypeStatusRspMultiError is an error wrapping multiple validation errors
// returned by SendTypeStatusRsp.ValidateAll() if the designated constraints
// aren't met.
type SendTypeStatusRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTypeStatusRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTypeStatusRspMultiError) AllErrors() []error { return m }

// SendTypeStatusRspValidationError is the validation error returned by
// SendTypeStatusRsp.Validate if the designated constraints aren't met.
type SendTypeStatusRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTypeStatusRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTypeStatusRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTypeStatusRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTypeStatusRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTypeStatusRspValidationError) ErrorName() string {
	return "SendTypeStatusRspValidationError"
}

// Error satisfies the builtin error interface
func (e SendTypeStatusRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTypeStatusRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTypeStatusRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTypeStatusRspValidationError{}

// Validate checks the field values on SendTemplateMsgReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendTemplateMsgReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTemplateMsgReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendTemplateMsgReqMultiError, or nil if none found.
func (m *SendTemplateMsgReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTemplateMsgReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Touser

	// no validation rules for TemplateId

	// no validation rules for Url

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SendTemplateMsgReqValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SendTemplateMsgReqValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SendTemplateMsgReqValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return SendTemplateMsgReqMultiError(errors)
	}

	return nil
}

// SendTemplateMsgReqMultiError is an error wrapping multiple validation errors
// returned by SendTemplateMsgReq.ValidateAll() if the designated constraints
// aren't met.
type SendTemplateMsgReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTemplateMsgReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTemplateMsgReqMultiError) AllErrors() []error { return m }

// SendTemplateMsgReqValidationError is the validation error returned by
// SendTemplateMsgReq.Validate if the designated constraints aren't met.
type SendTemplateMsgReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTemplateMsgReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTemplateMsgReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTemplateMsgReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTemplateMsgReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTemplateMsgReqValidationError) ErrorName() string {
	return "SendTemplateMsgReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendTemplateMsgReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTemplateMsgReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTemplateMsgReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTemplateMsgReqValidationError{}

// Validate checks the field values on SendTemplateMsgRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendTemplateMsgRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTemplateMsgRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendTemplateMsgRspMultiError, or nil if none found.
func (m *SendTemplateMsgRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTemplateMsgRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Errcode

	// no validation rules for Errmsg

	// no validation rules for Msgid

	if len(errors) > 0 {
		return SendTemplateMsgRspMultiError(errors)
	}

	return nil
}

// SendTemplateMsgRspMultiError is an error wrapping multiple validation errors
// returned by SendTemplateMsgRsp.ValidateAll() if the designated constraints
// aren't met.
type SendTemplateMsgRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTemplateMsgRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTemplateMsgRspMultiError) AllErrors() []error { return m }

// SendTemplateMsgRspValidationError is the validation error returned by
// SendTemplateMsgRsp.Validate if the designated constraints aren't met.
type SendTemplateMsgRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTemplateMsgRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTemplateMsgRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTemplateMsgRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTemplateMsgRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTemplateMsgRspValidationError) ErrorName() string {
	return "SendTemplateMsgRspValidationError"
}

// Error satisfies the builtin error interface
func (e SendTemplateMsgRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTemplateMsgRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTemplateMsgRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTemplateMsgRspValidationError{}

// Validate checks the field values on CreateQRCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateQRCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateQRCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateQRCodeReqMultiError, or nil if none found.
func (m *CreateQRCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateQRCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExpireSeconds

	// no validation rules for ActionName

	if all {
		switch v := interface{}(m.GetActionInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateQRCodeReqValidationError{
					field:  "ActionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateQRCodeReqValidationError{
					field:  "ActionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActionInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateQRCodeReqValidationError{
				field:  "ActionInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateQRCodeReqMultiError(errors)
	}

	return nil
}

// CreateQRCodeReqMultiError is an error wrapping multiple validation errors
// returned by CreateQRCodeReq.ValidateAll() if the designated constraints
// aren't met.
type CreateQRCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateQRCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateQRCodeReqMultiError) AllErrors() []error { return m }

// CreateQRCodeReqValidationError is the validation error returned by
// CreateQRCodeReq.Validate if the designated constraints aren't met.
type CreateQRCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQRCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQRCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQRCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQRCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQRCodeReqValidationError) ErrorName() string { return "CreateQRCodeReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateQRCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQRCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQRCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQRCodeReqValidationError{}

// Validate checks the field values on CreateQRCodeRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateQRCodeRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateQRCodeRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateQRCodeRspMultiError, or nil if none found.
func (m *CreateQRCodeRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateQRCodeRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ticket

	// no validation rules for ExpireSeconds

	// no validation rules for Url

	if len(errors) > 0 {
		return CreateQRCodeRspMultiError(errors)
	}

	return nil
}

// CreateQRCodeRspMultiError is an error wrapping multiple validation errors
// returned by CreateQRCodeRsp.ValidateAll() if the designated constraints
// aren't met.
type CreateQRCodeRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateQRCodeRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateQRCodeRspMultiError) AllErrors() []error { return m }

// CreateQRCodeRspValidationError is the validation error returned by
// CreateQRCodeRsp.Validate if the designated constraints aren't met.
type CreateQRCodeRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQRCodeRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQRCodeRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQRCodeRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQRCodeRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQRCodeRspValidationError) ErrorName() string { return "CreateQRCodeRspValidationError" }

// Error satisfies the builtin error interface
func (e CreateQRCodeRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQRCodeRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQRCodeRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQRCodeRspValidationError{}

// Validate checks the field values on SendTemplateMsgReq_Keyword with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendTemplateMsgReq_Keyword) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTemplateMsgReq_Keyword with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendTemplateMsgReq_KeywordMultiError, or nil if none found.
func (m *SendTemplateMsgReq_Keyword) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTemplateMsgReq_Keyword) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Color

	if len(errors) > 0 {
		return SendTemplateMsgReq_KeywordMultiError(errors)
	}

	return nil
}

// SendTemplateMsgReq_KeywordMultiError is an error wrapping multiple
// validation errors returned by SendTemplateMsgReq_Keyword.ValidateAll() if
// the designated constraints aren't met.
type SendTemplateMsgReq_KeywordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTemplateMsgReq_KeywordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTemplateMsgReq_KeywordMultiError) AllErrors() []error { return m }

// SendTemplateMsgReq_KeywordValidationError is the validation error returned
// by SendTemplateMsgReq_Keyword.Validate if the designated constraints aren't met.
type SendTemplateMsgReq_KeywordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTemplateMsgReq_KeywordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTemplateMsgReq_KeywordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTemplateMsgReq_KeywordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTemplateMsgReq_KeywordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTemplateMsgReq_KeywordValidationError) ErrorName() string {
	return "SendTemplateMsgReq_KeywordValidationError"
}

// Error satisfies the builtin error interface
func (e SendTemplateMsgReq_KeywordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTemplateMsgReq_Keyword.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTemplateMsgReq_KeywordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTemplateMsgReq_KeywordValidationError{}

// Validate checks the field values on CreateQRCodeReq_ActionInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateQRCodeReq_ActionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateQRCodeReq_ActionInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateQRCodeReq_ActionInfoMultiError, or nil if none found.
func (m *CreateQRCodeReq_ActionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateQRCodeReq_ActionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetScene()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateQRCodeReq_ActionInfoValidationError{
					field:  "Scene",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateQRCodeReq_ActionInfoValidationError{
					field:  "Scene",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScene()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateQRCodeReq_ActionInfoValidationError{
				field:  "Scene",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateQRCodeReq_ActionInfoMultiError(errors)
	}

	return nil
}

// CreateQRCodeReq_ActionInfoMultiError is an error wrapping multiple
// validation errors returned by CreateQRCodeReq_ActionInfo.ValidateAll() if
// the designated constraints aren't met.
type CreateQRCodeReq_ActionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateQRCodeReq_ActionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateQRCodeReq_ActionInfoMultiError) AllErrors() []error { return m }

// CreateQRCodeReq_ActionInfoValidationError is the validation error returned
// by CreateQRCodeReq_ActionInfo.Validate if the designated constraints aren't met.
type CreateQRCodeReq_ActionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQRCodeReq_ActionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQRCodeReq_ActionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQRCodeReq_ActionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQRCodeReq_ActionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQRCodeReq_ActionInfoValidationError) ErrorName() string {
	return "CreateQRCodeReq_ActionInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQRCodeReq_ActionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQRCodeReq_ActionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQRCodeReq_ActionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQRCodeReq_ActionInfoValidationError{}

// Validate checks the field values on CreateQRCodeReq_ActionInfo_Scence with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateQRCodeReq_ActionInfo_Scence) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateQRCodeReq_ActionInfo_Scence
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateQRCodeReq_ActionInfo_ScenceMultiError, or nil if none found.
func (m *CreateQRCodeReq_ActionInfo_Scence) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateQRCodeReq_ActionInfo_Scence) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SceneStr

	if len(errors) > 0 {
		return CreateQRCodeReq_ActionInfo_ScenceMultiError(errors)
	}

	return nil
}

// CreateQRCodeReq_ActionInfo_ScenceMultiError is an error wrapping multiple
// validation errors returned by
// CreateQRCodeReq_ActionInfo_Scence.ValidateAll() if the designated
// constraints aren't met.
type CreateQRCodeReq_ActionInfo_ScenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateQRCodeReq_ActionInfo_ScenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateQRCodeReq_ActionInfo_ScenceMultiError) AllErrors() []error { return m }

// CreateQRCodeReq_ActionInfo_ScenceValidationError is the validation error
// returned by CreateQRCodeReq_ActionInfo_Scence.Validate if the designated
// constraints aren't met.
type CreateQRCodeReq_ActionInfo_ScenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQRCodeReq_ActionInfo_ScenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQRCodeReq_ActionInfo_ScenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQRCodeReq_ActionInfo_ScenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQRCodeReq_ActionInfo_ScenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQRCodeReq_ActionInfo_ScenceValidationError) ErrorName() string {
	return "CreateQRCodeReq_ActionInfo_ScenceValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQRCodeReq_ActionInfo_ScenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQRCodeReq_ActionInfo_Scence.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQRCodeReq_ActionInfo_ScenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQRCodeReq_ActionInfo_ScenceValidationError{}
